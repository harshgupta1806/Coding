    
    TreeNode *pred(TreeNode* node){
        node=node->left;
        while(node && node->right) node=node->right;
        return node;        
    }
    TreeNode* del(TreeNode* node) {
        if(!node->right) return node->left;
        if(!node->left) return node->right;
        TreeNode *pre = pred(node);
        pre->right=node->right;
        return node->left;
    }
    TreeNode* deleteNode(TreeNode* root, int k) {
        if(!root) return NULL;
        if(root->val == k) return del(root);
        if(root->val > k){
            if(root->left && root->left->val == k) root->left = del(root->left);
            else deleteNode(root->left,k);
        }else{
            if(root->right && root->right->val == k) root->right = del(root->right);
            else deleteNode(root->right,k);
        }
        return root;
    }


-----------------------------------------------replacing with inorder pred or suc-----------------------------------------------------

    TreeNode* succ(TreeNode* root){
        if(!root) return root;
        root=root->right;
        while(root && root->left) root=root->left;
        return root;
    }

    TreeNode* pred(TreeNode* root){
        if(!root) return root;
        root=root->left;
        while(root && root->right) root=root->right;
        return root;
    }
    
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root) return root;
        if(root->val > key) root->left = deleteNode(root->left,key);
        else if(root->val < key) root->right = deleteNode(root->right,key);
        else{
            if(!root->left) return root->right;
            if(!root->right) return root->left;
            else{

                // TreeNode* temp = succ(root);
                // root->val = temp->val;
                // root->right = deleteNode(root->right,temp->val);
                
                TreeNode* temp = pred(root);
                root->val = temp->val;
                root->left = deleteNode(root->left,temp->val);

            }
        }
        return root;
    }