vector<int> spiralOrder(vector<vector<int>> &mat)
{
    int n = mat.size();
    int m = mat[0].size();
    vector<vector<int>> vis(n, vector<int>(m, 0));
    int change_r[] = {0, 1, 0, -1};
    int change_c[] = {1, 0, -1, 0};
    vector<int> ans;
    int p = 0, q = 0, k = 0;
    for (int i = 0; i < m * n; i++)
    {
        ans.push_back(mat[p][q]);
        vis[p][q] = 1;
        int new_p = p + change_r[k];
        int new_q = q + change_c[k];

        if (new_p >= 0 && new_p < n && new_q >= 0 && new_q < m && !vis[new_p][new_q])
        {
            p = new_p;
            q = new_q;
        }
        else
        {
            k = (k + 1) % 4;
            p += change_r[k];
            q += change_c[k];
        }
    }
    return ans;
}


----------------------------------------------------OR-----------------------------------------------------------

    vector<int> spiralOrder(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        vector<int> ans;
        int top_r = 0, bottom_r = n-1;
        int left_c = 0, right_c = m-1;
        while(top_r<=bottom_r && left_c<=right_c){
            for(int i=left_c;i<=right_c;i++) ans.push_back(mat[top_r][i]);
            top_r++;
            for(int i=top_r;i<=bottom_r;i++) ans.push_back(mat[i][right_c]);
            right_c--;
            if(top_r<=bottom_r){
                for(int i=right_c;i>=left_c;i--) ans.push_back(mat[bottom_r][i]);
                bottom_r--;
            }
            if(left_c<=right_c){
                for(int i=bottom_r;i>=top_r;i--) ans.push_back(mat[i][left_c]);
                left_c++;
            }
        }
        return ans;
    }