/*
85.Given a rows x cols binary matrix filled with 0's and 1's,
find the largest rectangle containing only 1's and return its area.
*/
// using largest rect in histogram
    int largestRectangleArea(vector<int>& h) {
        int n=h.size();
        stack<int> st;
        int ans=0;
        for(int i=0;i<n;i++){
            while(!st.empty() && (i==n || h[st.top()] >= h[i])){
                int cur = st.top();
                st.pop();
                int nse = i;
                int pse = st.empty() ? -1 : st.top();
                ans = max(ans, h[cur] * (nse - pse - 1));
            }
            st.push(i);
        }
        while(!st.empty()){
            int cur = st.top();
            st.pop();
            int nse = n;
            int pse = st.empty() ? -1 : st.top();
            ans = max(ans, h[cur] * (nse - pse - 1));
        }
        return ans;
    }
int maximalRectangle(vector<vector<char>> mat)
{
    int n = mat.size();
    int m = mat[0].size();
    int maxArea = 0;
    vector<int> height(m, 0);
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (mat[i][j] == '1')
                height[j]++;
            else
                height[j] = 0;
        }
        int area = largestRectangleArea(height);
        maxArea = max(maxArea, area);
    }
    return maxArea;
}
int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    return 0;
}