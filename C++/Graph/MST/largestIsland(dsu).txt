You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.
Return the size of the largest island in grid after applying this operation.


    int largestIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        DSU ds(n*n);
        int cx[4]={-1,0,1,0};
        int cy[4]={0,1,0,-1};
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]){
                    for(int a=0;a<4;a++){
                        int nr=i+cx[a];
                        int nc=j+cy[a];
                        if(nr>=0 && nc>=0 && nr<n && nc<n && grid[nr][nc]){
                            int index=i*n+j;
                            int nindex=nr*n+nc;
                            ds.ubs(index,nindex);
                        }
                    }
                }
            }
        }
        int ans=-1;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int size=1;
                if(!grid[i][j]){
                    set<int> st;
                    for(int a=0;a<4;a++){
                        int ni=i+cx[a];
                        int nj=j+cy[a];
                        if(ni>=0 && nj>=0 && ni<n && nj<n && grid[ni][nj]){
                            int nindex=ni*n+nj;
                            st.insert(ds.fp(nindex));
                        }
                    }
                    for(auto s:st) size+=ds.get_size(s);
                    ans=max(ans,size);
                }
            }
        }
        return ans==-1?n*n:ans;
    }