//adj-->> adjacency matrix for the graph with edge weights

    for(int via=0;via<n;via++){
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                adj[i][j]=min(adj[i][j],adj[i][via]+adj[via][j]);
            }
        }
    }

    //cycle detection
    for(int i=0;i<n;i++){
        if(adj[i][i]<0){
            //cycle
        }
    }

//shortest btw src dest

    int floydWarshall(int n, int m, int src, int dest, vector<vector<int>> &edges){
        vector<vector<int>> adj(n+1,vector<int>(n,1e9));
        for(int i=0;i<n;i++){
            adj[i][i]=0;
        }
        for(auto x:edges){
            adj[x[0]][x[1]]=x[2];
        }

        for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(adj[i][k]!=1e9 && adj[k][j]!=1e9)
                    adj[i][j]=min(adj[i][j],adj[i][k]+adj[k][j]);
                }
            }
        }
        return adj[src][dest];
    }

**************************************************************************************************************************************
if adj mat is given with ew=-1 if no edge is there then all pair shortest path matrix :

	void shortest_distance(vector<vector<int>>&adj){
	    int n=adj.size();
	    for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(adj[i][k]!=-1 && adj[k][j]!=-1){
                        if(adj[i][j] == -1 || adj[i][k]+adj[k][j] < adj[i][j]){
                            adj[i][j] = adj[i][k]+adj[k][j]; 
                        }
                    }
                }
            }
        }
	}
**************************************************************************************************************************************