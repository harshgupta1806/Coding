Given two strings s and p. Find the smallest window in the string s consisting of all the characters(including duplicates) of the 
string p.  Return "-1" in case there is no such window present. In case there are multiple such windows of same length, return the 
one with the least starting index.


    
    string smallestWindow (string s, string p)
    {
        unordered_map<char,int> mp;
        for(auto c:p) mp[c]++;
        int i=0,j=0,min_len=1e6,start=-1,n=s.length(),cnt=0;
        while(j<n){
            if(mp[s[j]]-- > 0) cnt++;
            while(cnt==p.length() && i<n){
                if(j-i+1 < min_len){
                    min_len=j-i+1;
                    start=i;
                }else if(j-i+1 == min_len){
                    start=min(start,i);
                }
                if(++mp[s[i++]] > 0) cnt--;
            }
            j++;
        }
        return start==-1 ? to_string(-1) : s.substr(start,min_len);
    }

--------------------------------------------------------------------------------------------------------------------------------------------
//high complexity -> checking every substring  
    bool isPresent(string s, int n, map<char,int> mp){
        int cnt=0;
        for(auto c:s){
            if(mp[c]) {cnt++;mp[c]--;}
        }
        return cnt==n;
    }
    string smallestWindow (string s, string p)
    {
        map<char,int> mp;
        for(auto c:p) mp[c]++;
        int i=0,j=0,min_len=1e6,start=-1,n=s.length();
        while(j<n){
            while(isPresent(s.substr(i,j-i+1),p.length(),mp) && i<n){
                if(j-i+1 < min_len){
                    min_len=j-i+1;
                    start=i;
                }else if(j-i+1 == min_len){
                    start=min(start,i);
                }
                i++;
            }
            j++;
        }
        return s.substr(start,min_len);
    }