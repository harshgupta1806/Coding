vector<int> dfsOfGraph(int source,vector<int> adj[],vector<int> &vis,vector<int> &dfs){
    vis[source]=1;
    dfs.push_back(source);
    for(auto i : adj[sorce]){
        if(!vis[i]){
            dfsOfGraph(i,adj,vis,dfs);
        }
    }
    return dfs;
}

-----------------------------------------------------find all reachables----------------------------------------------------------------

// call for every node
void dfs(int node, vector<int>& vis, vector<int> adj[], vector<unordered_set<int>>& reachable){
    vis[node]=1;
    for(auto it:adj[node]){
        if(!vis[it]){
            dfs(it,vis,adj,reachable);
        }
        reachable[node].insert(reachable[it].begin(),reachable[it].end());
    }
    reachable[node].insert(node);
}

------------------------------------------------------------------------------------------------------------------------------------------

vector<int> bfsOfGraph(int V, vector<int> adj[]) {
    vector<int> bfs;
    int vis[V]={0};
    vis[0]=1;
    queue<int> q;
    q.push(0);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        bfs.push_back(node);
        for(auto it : adj[node]){
            if(!vis[it]){
                vis[it]=1;
                q.push(it);  
            }
        }
    }
    return bfs;
}