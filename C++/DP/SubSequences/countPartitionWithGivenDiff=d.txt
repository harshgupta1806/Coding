Given an array arr, partition it into two subsets(possibly empty) such that each element must belong to only one subset. 
Let the sum of the elements of these two subsets be S1 and S2. 
Given a difference d, count the number of partitions in which S1 is greater than or equal to S2 
and the difference between S1 and S2 is equal to d. Since the answer may be large return it modulo 109 + 7.    
    

    int mod=1e9+7;
    int solve(int ind, int tar, vector<int>& arr,vector<vector<int>>& dp){
        if(ind==0){
            if(!tar && !arr[ind]) return 2; -----------------handle with arrays having 0
            if(!tar || tar==arr[ind]) return 1;
            return 0;
        }
        if(dp[ind][tar]!=-1) return dp[ind][tar];
        int np=solve(ind-1,tar,arr,dp);
        int p=0;
        if(arr[ind]<=tar) p=solve(ind-1,tar-arr[ind],arr,dp);
        return dp[ind][tar]=(p%mod+np%mod)%mod;
    }
    int countPartitions(int n, int d, vector<int>& arr) {
        int tot=accumulate(arr.begin(),arr.end(),0);
        int tar=(tot+d)/2;
        vector<vector<int>> dp(n,vector<int>(tar+1,-1));
        if((tot+d)<0 | (tot+d)%2) return 0;
        return solve(n-1,tar,arr,dp);
    }

----------------------------------------------------------------Tabulation-------------------------------------------------------------------

    int countPartitions(int n, int d, vector<int>& arr) {
        int tot=accumulate(arr.begin(),arr.end(),0);
        int tar=(tot+d)/2;
        vector<vector<int>> dp(n,vector<int>(tar+1,0));
        if((tot-d)<0 | (tot-d)%2) return 0;

        if(!arr[0]) dp[0][0]=2;
        else dp[0][0]=1;
        
        if(arr[0]!=0 && arr[0]<=tar) dp[0][arr[0]]=1;
        
        int mod=1e9+7;
		for(int i=1;i<n;i++){
			for(int j=0;j<=tar;j++){
				int temp=0;
				if(j-arr[i]>=0) temp=dp[i-1][j-arr[i]];
				dp[i][j]=(dp[i-1][j] + temp)%mod;
			}
		}
		return dp[n-1][tar];
    }

------------------------------------------------------------Optimized Tabulation-------------------------------------------------------------------

    int countPartitions(int n, int d, vector<int>& arr) {
        int tot=accumulate(arr.begin(),arr.end(),0);
        int tar=(tot+d)/2;
        
        vector<vector<int>> dp(n,vector<int>(tar+1,0));
        vector<int> prev(tar+1), cur(tar+1);
        if((tot-d)%2) return 0;
        
        if(!arr[0]) prev[0]=2;
        else prev[0]=1;
        if(arr[0]!=0 && arr[0]<=tar) prev[arr[0]]=1;
        
        int mod=1e9+7;
		for(int i=1;i<n;i++){
			for(int j=0;j<=tar;j++){
				int temp=0;
				if(j-arr[i]>=0) temp=prev[j-arr[i]];
				cur[j]=(prev[j] + temp)%mod;
			}
			prev=cur;;
		}
		return cur[tar];
    }

