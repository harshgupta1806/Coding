On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone,
return the largest possible number of stones that can be removed.


    int removeStones(vector<vector<int>>& stones) {
        int r=-1,c=-1,n=stones.size();
        for(auto s:stones){
            r=max(r,s[0]);
            c=max(c,s[1]);
        }
        DSU dsu(r+c+2);
        unordered_set<int> st;
        for(auto s:stones) {dsu.ubs(s[0],s[1]+r+1);st.insert(s[0]);st.insert(s[1]+r+1);}
        for(auto s:st) if(dsu.fp(s)==s) n--;
        return n;
    }