        
    int timer=1;
    void dfs(int node, int parent, vector<int>& stepsToReach, vector<int>& canReachMin, vector<int>& vis, vector<int> adj[], vector<vector<int>>& bridges){
        vis[node]=1;
        stepsToReach[node]=timer;
        canReachMin[node]=timer;
        timer++;
        for(auto it:adj[node]){
            if(it == parent) continue;
            if(!vis[it]){
                dfs(it,node,stepsToReach,canReachMin,vis,adj,bridges);
                canReachMin[node]=min(canReachMin[node], canReachMin[it]);
                if(stepsToReach[node] < canReachMin[it]){
                    bridges.push_back({it,node});
                }
            }else{
                canReachMin[node]=min(canReachMin[node], canReachMin[it]);
            }
        }
    }
    vector<vector<int>> findBridges(int n, vector<vector<int>>& edges) {
        vector<int> adj[n];
        for(auto e:edges){
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> stepsToReach(n), canReachMin(n), vis(n);
        vector<vector<int>> bridges;
        dfs(0,-1,stepsToReach,canReachMin,vis,adj,bridges);
        return bridges;
    }

-------------------------------------------------------------------------------------------------------------------

Given a Graph of V vertices and E edges and another edge(c - d), 
the task is to find if the given edge is a Bridge. i.e., removing the edge disconnects the graph.

    void dfs(int node, vector<int>& vis, vector<int> adj[]){
        vis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]) dfs(it,vis,adj);
        }
    }
    int isBridge(int n, vector<int> adj[], int c, int d) 
    {
        auto it_c=find(adj[d].begin(),adj[d].end(),c);
        auto it_d=find(adj[c].begin(),adj[c].end(),d);
        adj[c].erase(it_d);
        adj[d].erase(it_c);
        vector<int> vis(n);
        dfs(c,vis,adj);
        return !vis[d];
    }