//Without Dublicates

    bool search(vector<int>& nums, int t) {
        int l=0,r=nums.size()-1;
        while(l<=r){
            int m=l+(r-l)/2;
            if(nums[m]==t) return true;
            else if(nums[l] <= nums[m]){ // means left is sorted
                if(nums[l] <= t && t <= nums[m]) r=m-1;
                else l=m+1;
            }else if(nums[m] <= nums[r]){ // means right is sorted
                if(nums[m] <= t && t <= nums[r]) l=m+1;
                else r=m-1;
            }
        }
        return false;
    }

---------------------------------------------------------------------------------------------------------------------------------------------------------

//With Dublicates -> cannot tell index using BS has to perform LS for index, rather can return T/F
// only condition that troubles in finding the sorted array is when 
        nums[l] == nums[m] == nums[r]  -> and t != arr[m] trim it -> l++,r--


    bool search(vector<int>& nums, int t) {
        int l=0,r=nums.size()-1;
        while(l<=r){
            int m=l+(r-l)/2;
            if(nums[m]==t) return true;
            else if(nums[l] == nums[m] && nums[l] == nums[r]){
                l++;r--;
            }
            else if(nums[l] <= nums[m]){ // means left is sorted
                if(nums[l] <= t && t <= nums[m]) r=m-1;
                else l=m+1;
            }else if(nums[m] <= nums[r]){ // means right is sorted
                if(nums[m] <= t && t <= nums[r]) l=m+1;
                else r=m-1;
            }
        }
        return false;
    }