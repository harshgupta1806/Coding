vector<vector<int>> getTreeTraversal(TreeNode *root)
{
    vector<vector<int>> all(3);
    stack<pair<TreeNode *, int>> s;
    s.push({root, 1});
    while (!s.empty())
    {
        pair<TreeNode *, int> p = s.top();
        if (p.second == 1)
        {
            s.top().second++;
            all[1].push_back(p.first->data);
            if (p.first->left)
            {
                s.push({p.first->left, 1});
            }
        }
        else if (p.second == 2)
        {
            s.top().second++;
            all[0].push_back(p.first->data);
            if (p.first->right)
            {
                s.push({p.first->right, 1});
            }
        }
        else
        {
            all[2].push_back(p.first->data);
            s.pop();
        }
    }
    return all;
}

void allTraversals(TreeNode *root, vector<vector<int>> &all)
{
    if (!root)
        return;
    all[1].push_back(root->data); // preorder
    allTraversals(root->left, all);
    all[0].push_back(root->data); // inorder
    allTraversals(root->right, all);
    all[2].push_back(root->data); // postorder
}
