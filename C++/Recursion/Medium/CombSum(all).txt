//Can pick one element multiple times

    void solve(int i,int cs,int n,vector<int>&candidates,int t,vector<int> &temp,vector<vector<int>> &ans){
        if(i==n){
            if(cs==t) ans.push_back(temp);
            return;
        }
        if(cs+candidates[i] <= t){
            temp.push_back(candidates[i]);
            solve(i,cs+candidates[i],n,candidates,t,temp,ans);
            temp.pop_back();
        }
        solve(i+1,cs,n,candidates,t,temp,ans);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> temp;
        solve(0,0,candidates.size(),candidates,target,temp,ans);
        return ans;
    }
----------------------------------------------------when array has dublicates-----------------------------------------------------------------------
//Can pick one element one time

    void solve(int cs,int ind, int n, int t,vector<int>& candidates,vector<int>& temp,vector<vector<int>>& ans){
        if(cs==t){
            ans.push_back(temp);
        }
        for(int i=ind;i<n;i++){
            if(i>ind && candidates[i]==candidates[i-1]) continue; // i>ind -> to not skip the first element  == -> to avoid dublicates 
            if(cs + candidates[i] > t) break;
            temp.push_back(candidates[i]);
            solve(cs+candidates[i],i+1,n,t,candidates,temp,ans);
            temp.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> temp;
        sort(candidates.begin(),candidates.end()); --------------------->Sorting important when dublicates
        solve(0,0,candidates.size(),target,candidates,temp,ans);
        return ans;
    }

-----------------------------------------------------------------------------------------------------------------------------------------
// pick k elements btw 1 and 9 to make sum n

    void solve(int num, int cs, int rem, int n,vector<int>& temp,vector<vector<int>>& ans){
        if(!rem){
            if(cs==n) ans.push_back(temp);
            return;
        }
        if(num>9 || cs>n) return;
        temp.push_back(num);
        solve(num+1,cs+num,rem-1,n,temp,ans);
        temp.pop_back();
        solve(num+1,cs,rem,n,temp,ans);
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> temp;
        solve(1,0,k,n,temp,ans);
        return ans;
    }