Create n empty buckets (Or lists) and do the following for every array element arr[i].
    Insert arr[i] into bucket[n*array[i]]
    Sort individual buckets using insertion sort.
    Concatenate all sorted buckets.

-> we use quicksort (or any stable sorting algorithm) to sort the elements within each bucket.


// Insertion sort function to sort individual buckets
    void insertionSort(vector<float>& bucket) {
        for (int i = 1; i < bucket.size(); ++i) {
            float key = bucket[i];
            int j = i - 1;
            while (j >= 0 && bucket[j] > key) {
                bucket[j + 1] = bucket[j];
                j--;
            }
            bucket[j + 1] = key;
        }
    }

    void bucketSort(float arr[], int n) {
        vector<float> b[n];
        for (int i = 0; i < n; i++) {
            int bi = n * arr[i];
            b[bi].push_back(arr[i]);
        }
        for (int i = 0; i < n; i++) {
            insertionSort(b[i]);
        }
        int index = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < b[i].size(); j++) {
                arr[index++] = b[i][j];
            }
        }
    }