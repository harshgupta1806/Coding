Given an integer n, return the number of prime numbers that are strictly less than n.

--------------------------------------------------------Sieve of Eratosthenes------------------------------------------------------------

    int countPrimes(int n) {
        if(!n || n==1) return 0;
        vector<int> isPrime(n,1);
        for(int i=2;i<n;i++){
            if(isPrime[i]){
                int x=2;
                while(i*x < n) isPrime[i*(x++)]=0;
            }
        }
        return accumulate(isPrime.begin(),isPrime.end(),-2);
    }

-------------------------------------------------------optimised : O(N log(logN))------------------------------------------------------------

    int countPrimes(int n) {
        if(!n || n==1) return 0;
        vector<int> isPrime(n,1);
        for(int i=2;i*i<n;i++){
            if(isPrime[i]){
                for(int j=i*i;j<n;j+=i){
                    isPrime[j]=0;
                }
            }
        }
        return accumulate(isPrime.begin(),isPrime.end(),-2);
    }

------------------------------------------------------------from L to R---------------------------------------------------------------------

    int countPrimes(int L, int R) {
        vector<int> isPrime(R+1,1);
        isPrime[0]=isPrime[1]=0;
        for(int i=2;i*i<=R;i++){
            if(isPrime[i]){
                for(int j=i*i;j<=R;j+=i) isPrime[j]=0;
            }
        }
        return accumulate(isPrime.begin()+L,isPrime.end(),0); -> or can be done using prefix sum array
    }