---------------------------------SP in UG with EW=1(bfs)---------------------------
vector<int> shortestPath(int n, vector<vector<int>>&edges, int src) {
    vector<vector<int>> adj(n);
    for(auto x:edges){
        adj[x[0]].push_back(x[1]);
        adj[x[1]].push_back(x[0]);
    }
    vector<int> dis(n,INT_MAX);
    dis[src]=0;
    queue<int> q;
    q.push(src);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for(auto x:adj[node]){
            if(dis[node]+1 < dis[x]){
                dis[x]=dis[node]+1;
                q.push(x);
            }
        }
    }
    for(int i=0;i<n;i++){
        if(dis[i]==INT_MAX){
            dis[i]=-1;
        }
    }
    return dis;
}

//OR

vector<int> shortestPath(int n, vector<vector<int>>&edges, int src) {
    vector<vector<int>> adj(n);
    for(auto x:edges){
        adj[x[0]].push_back(x[1]);
        adj[x[1]].push_back(x[0]);
    }
    vector<int> dis(n,-1);
    vector<int> vis(n,0);
    queue<pair<int,int>> q;
    q.push({src,0});
    vis[src]=1;
    while(!q.empty()){
        int node=q.front().first;
        int d=q.front().second;
        q.pop();
        dis[node]=d;
        for(auto x:adj[node]){
            if(!vis[x]){
                vis[x]=1;
                q.push({x,d+1});
            }
        }
    }
    return dis;
}