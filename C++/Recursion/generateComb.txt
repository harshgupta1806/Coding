Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.
Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


void solve(int idx, int n, string temp,map<char,string>& mp, vector<string> &ans, string digits){
    if(idx==n){
        ans.push_back(temp);
        return;
    }
    for(auto c: mp[digits[idx]]){
        temp+=c;
        solve(idx+1,n,temp,mp,ans,digits);
        temp.pop_back();
    }
}
vector<string> letterCombinations(string digits) {
    if(digits.length()==0) return {};
    map<char,string> mp;
    mp['2']="abc";
    mp['3']="def";
    mp['4']="ghi";
    mp['5']="jkl";
    mp['6']="mno";
    mp['7']="pqrs";
    mp['8']="tuv";
    mp['9']="wxyz";
    vector<string> ans;
    solve(0,digits.length(),"",mp,ans,digits);
    return ans;
}