Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.


    int gh(TreeNode* root){
        if(!root) return 0;
        return 1+max(gh(root->left),gh(root->right));
    }
    TreeNode* lr(TreeNode* x){
        TreeNode *y=x->right, *z=y->left;
        y->left=x;
        x->right=z;
        return y;
    }
    TreeNode* rr(TreeNode* x){
        TreeNode *y=x->left, *z=y->right;
        y->right=x;
        x->left=z;
        return y;
    }
    TreeNode* insert(TreeNode* root, int x){
        if(!root) return root=new TreeNode(x);
        else if(root->val > x) root->left=insert(root->left,x);
        else if(root->val < x) root->right=insert(root->right,x);
        else return root;
        int bf = gh(root->left) - gh(root->right);
        if(bf > 1){
            if(x < root->left->val) return rr(root);
            else if(x > root->left->val){
                root->left = lr(root->left);
                return rr(root);
            }
        }else if(bf < -1){
            if(x > root->right->val) return lr(root);
            else if(x < root->right->val){
                root->right = rr(root->right);
                return lr(root);
            }
        }
        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        if(!head) return NULL;
        ListNode* temp=head;
        TreeNode *root = NULL;
        while(temp){
            root=insert(root,temp->val);
            temp=temp->next;
        }
        return root;
    }