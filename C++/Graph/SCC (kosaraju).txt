

	void dfs(int node,vector<vector<int>>& adj,vector<int>& vis,stack<int> &endExplOrder){
		vis[node]=1;
		for(auto x:adj[node]){
			if(!vis[x]){
				dfs(x,adj,vis,endExplOrder);
			}
		}
		endExplOrder.push(node);
	}
	void dfs(int node,vector<vector<int>>& adj,vector<int>& vis){
		vis[node]=1;
		for(auto x:adj[node]){
			if(!vis[x]){
				dfs(x,adj,vis);
			}
		}
	}
	int kosaraju(int V, vector<vector<int>>& adj)
	{
		stack<int> endExplOrder;
		vector<int> vis(V);
		for(int i=0;i<V;i++){
			if(!vis[i]){
				dfs(i,adj,vis,endExplOrder);    
			}
		}
		vector<vector<int>> adjT(V);
		for(int i=0;i<V;i++){
			vis[i]=0;
			for(auto x:adj[i]){
				adjT[x].push_back(i);
			}
		}
		int scc=0;
		while(!endExplOrder.empty()){
			int node=endExplOrder.top();
			endExplOrder.pop();
			if(!vis[node]){
				scc++;
				dfs(node,adjT,vis);
			}
		}
		return scc;
	}