//check if tree has CSP
//node->val = node->left->val + node->right->val

    bool isParentSum(Node *root){
        if(!root) return true;
        if(root->left || root->right){ //if non leaf node
            int sum=0;
            if(root->left) sum += root->left->data;    
            if(root->right) sum += root->right->data;
            if(root->data != sum) return false;
        }
        return isParentSum(root->left) && isParentSum(root->right);
    }


************************************************************************************************************************************************


//change binary tree such that it follows children sum property
//can increment(only) any node any no. of times
//node->val = node->left->val + node->right->val


    void convertTree(Node* root)
    {
        if (!root) return;
        int childSum = 0;
        if (root->left) childSum += root->left->data;
        if (root->right) childSum += root->right->data;
        if (childSum >= root->data) root->data = childSum;
        else {
            if (root->left) root->left->data = root->data;
            if (root->right) root->right->data = root->data;
        }
        convertTree(root->left);
        convertTree(root->right);
        int totalSumToChangeParent = 0;
        if (root->left) totalSumToChangeParent += root->left->data;
        if (root->right) totalSumToChangeParent += root->right->data;
        if (root->left || root->right) root->data = totalSumToChangeParent;
    }