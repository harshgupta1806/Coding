    ListNode* reverse(ListNode* head){
        ListNode *p=NULL,*c=head,*n=NULL;
        while(c){
            n=c->next;
            c->next=p;
            p=c;
            c=n;
        }
        return p;
    }
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        ListNode *fast=head, *slow=head;
        while(fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        slow=slow->next;
        ListNode *a=head, *b=reverse(slow);
        while(b){
            if(a->val != b->val) return false;
            a=a->next;
            b=b->next;
        }
        return true;
    }


-------------------------------------------------------------------

    bool isPalindrome(Node *head) {
        if(!head || !head->next) return true;
        Node* f=head,*s=head;
        while(f->next){
            f=f->next;
            if(f->next){
                s=s->next;
                f=f->next;
            }
        }
        Node *p=NULL,*c=s->next,*n;
        s->next=NULL;
        while(c){
            n=c->next;
            c->next=p;
            p=c;
            c=n;
        }
        f=head;
        while(f && p){
            if(f->data != p->data) return false;
            f=f->next;
            p=p->next;
        }
        return true;
    }