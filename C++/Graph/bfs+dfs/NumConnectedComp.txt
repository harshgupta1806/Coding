

    void dfs(int node,int V,int vis[], vector<vector<int>>& adj){
        vis[node]=1;
        for(int i=0;i<V;i++){
            if(adj[node][i] && !vis[i]){
                dfs(i,V,vis,adj);
            }
        }
    }
    void bfs(int node,int V,int vis[], vector<vector<int>>& adj){
        queue<int> q;
        vis[node]=1;
        q.push(node);
        while(!q.empty()){
            int n=q.front();
            q.pop();
            for(int i=0;i<V;i++){
                if(!vis[i] && adj[n][i]){
                    vis[i]=1;
                    q.push(i);
                }
            }
        }
    }
    int numProvinces(vector<vector<int>> adj, int V) {
        int vis[V]={0};
        int ans=0;
        for(int i=0;i<V;i++){
            if(!vis[i]){
                ans++;
                // dfs(i,V,vis,adj);
                bfs(i,V,vis,adj);
            }
        }
        return ans;
    }