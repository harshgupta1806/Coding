You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n 
to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into 
one of the two arrays. Return the minimum possible absolute difference.

--------------------------------------------- totSum >>>> cant make dp of such large value--------------------------------------------
    int minimumDifference(vector<int>& arr) {
        int totSum = accumulate(arr.begin(),arr.end(),0), n=arr.size();
        vector<vector<bool>> dp(n, vector<bool>(totSum + 1, false));
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }
        if (arr[0] <= totSum) dp[0][totSum] = true;
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= totSum; target++) {
                bool notTaken = dp[ind - 1][target];
                bool taken = false;
                if (arr[ind] <= target) taken = dp[ind - 1][target - arr[ind]];
                dp[ind][target] = notTaken || taken;
            }
        }
        int mini = 1e9;
        for (int i = 0; i <= totSum; i++) {
            if (dp[n - 1][i] == true) {
                int diff = abs(i - (totSum - i));
                mini = min(mini, diff);
            }
        }
        return mini;
    }

--------------------------------------------------better way - Meet in Middle-----------------------------------------------------

    int minimumDifference(vector<int>& nums) {
        int N = nums.size(), n = N / 2;
        long long sum = accumulate(nums.begin(), nums.end(), 0LL);
        vector<vector<long long>> left(n + 1), right(n + 1);
        for (int mask = 0; mask < (1 << n); ++mask) {
            int sz = 0;
            long long l = 0, r = 0;
            for (int i = 0; i < n; ++i) {
                if (mask & (1 << i)) {
                    l += nums[i];
                    r += nums[i + n];
                    sz++;
                }
            }
            left[sz].push_back(l);
            right[sz].push_back(r);
        }
        int res = INT_MAX;
        for (int sz = 0; sz <= n; ++sz) {
            sort(right[n - sz].begin(), right[n - sz].end());
            for (auto &a : left[sz]) {
                long long b = (sum / 2) - a;
                auto itr = lower_bound(right[n - sz].begin(), right[n - sz].end(), b);
                if (itr != right[n - sz].end()) {
                    res = min(res, (int)abs(sum - 2 * (a + (*itr))));
                }
                if (itr != right[n - sz].begin()) {
                    --itr;
                    res = min(res, (int)abs(sum - 2 * (a + (*itr))));
                }
            }
        }
        return res;
    }


This segment of code is critical in finding the minimum possible difference between the sums of two subsets split from the array `nums`. The aim is to determine two subsets (one from each half of `nums`) such that the absolute difference between their sums is minimized. Hereâ€™s a detailed breakdown of how each line in this code block contributes to this goal:

### Key Variables
- `sz`: Represents the current subset size (number of elements) being considered.
- `left[sz]`: Stores all possible sums of subsets of size `sz` from the left half of `nums`.
- `right[n - sz]`: Stores all possible sums of subsets of size `n - sz` from the right half of `nums`.
- `res`: Keeps track of the minimum difference encountered so far.
- `sum`: Total sum of all elements in `nums`.

### Step-by-Step Explanation

#### 1. Loop Over Each Possible Subset Size (`sz`)
```cpp
for (int sz = 0; sz <= n; ++sz) {
```
- The outer loop iterates through all possible subset sizes from `0` up to `n`.
- For each size `sz`, the code will consider sums of subsets of size `sz` from the left half and size `n - sz` from the right half.
- This allows combining subsets from both halves such that their total size is `n`.

#### 2. Sort the `right` Subset Sums for Binary Search
```cpp
sort(right[n - sz].begin(), right[n - sz].end());
```
- Sorting `right[n - sz]` allows efficient binary searching for sums in the right half that are closest to a target value. This is crucial for minimizing the difference.
- By sorting, we can later use `lower_bound` to quickly find the closest sums in `right[n - sz]` to a target value derived from the left subset sum.

#### 3. Loop Through Each Sum in `left[sz]`
```cpp
for (auto &a : left[sz]) {
```
- This loop goes through each sum `a` in `left[sz]`, which represents a possible sum of a subset of size `sz` from the left half of `nums`.
- For each sum `a`, the code will attempt to find the closest complementary sum from the right half.

#### 4. Calculate the Target Complement Sum `b`
```cpp
long long b = (sum / 2) - a;
```
- Here, `b` is calculated as `(sum / 2) - a`.
- `b` represents the ideal value for a right subset sum that, when combined with `a`, will make the total as close as possible to half of the total sum (`sum / 2`).
- By aiming for half of the total sum, we try to create two subsets with nearly equal sums.

#### 5. Binary Search for Closest Sum in `right[n - sz]` Greater Than or Equal to `b`
```cpp
auto itr = lower_bound(right[n - sz].begin(), right[n - sz].end(), b);
```
- `lower_bound` finds the first element in `right[n - sz]` that is greater than or equal to `b`.
- This element (if it exists) is a potential candidate for forming a nearly equal-sum split with the current `a`.

#### 6. Calculate and Update Minimum Difference with `*itr`
```cpp
if (itr != right[n - sz].end()) {
    res = min(res, (int)abs(sum - 2 * (a + (*itr))));
}
```
- If `itr` points to a valid element in `right[n - sz]`, the code calculates the total sum of the current subset pair (`a + *itr`).
- The absolute difference between this combined sum and `sum / 2` is computed as `abs(sum - 2 * (a + *itr))`.
- If this difference is smaller than the current `res`, `res` is updated to store this new minimum difference.

#### 7. Check the Previous Element in `right[n - sz]` (if it Exists)
```cpp
if (itr != right[n - sz].begin()) {
    --itr;
    res = min(res, (int)abs(sum - 2 * (a + (*itr))));
}
```
- After checking the value at `*itr`, the code also considers the element immediately before `*itr` in `right[n - sz]`.
- This is because the closest value to `b` could be slightly less than `b`, and so we also evaluate `*itr - 1` if it exists.
- This ensures that we consider both the closest values above and below `b` to find the absolute minimum difference.

### Summary

By looping over each subset size and each sum in `left[sz]`, and using binary search to find the closest sums in `right[n - sz]`, this code efficiently finds the two subsets (one from each half of `nums`) that yield the smallest possible difference between their sums. The minimum difference found is stored in `res`, which is returned as the result of the function.