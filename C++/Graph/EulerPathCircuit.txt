

// print 2->Euler Cycle(all has even degrees)
// print 1->Euler path(only 2 vert has odd degrees)
// 0->otherwise



int isEulerCircuit(int V, vector<int> adj[])
{
    int t = 0;
    for (int i = 0; i < V; ++i)
    {
        int sz = adj[i].size();
        if (sz & 1)
            t++;
    }
    return (t == 0) ? (2) : ((t == 2) ? 1 : 0);
}


//TODO  directed graph has eulerian circuit only if in degree and out degree of every vertex is same, 
    and all non-zero degree vertices form a single strongly connected component.

    OR if in degree and out degree of every vertex is same then components are already strongly connected just check
        how many no. of components if ==1 return true