Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.
If there are multiple valid strings, return any of them.
-->> length = n+m-dp[n][m]


    string shortestCommonSupersequence(string s, string t) {
        int n=s.length();
        int m=t.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1));
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        int scs_len = n+m-dp[n][m];
        string ans(scs_len, '0');

        int i=n,j=m,index=scs_len-1;
        while(i>0 && j>0){
            if(s[i-1]==t[j-1]){
                ans[index--]=s[i-1];
                i--;
                j--;
            }else{
                if(dp[i-1][j] > dp[i][j-1]){
                    ans[index--]=s[i---1];
                }else{
                    ans[index--]=t[j---1];
                }
            }
        }
        while(i>0){
            ans[index--]=s[i---1];
        }
        while(j>0){
            ans[index--]=t[j---1];
        }
        return ans; 
    }