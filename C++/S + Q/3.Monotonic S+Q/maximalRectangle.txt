Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area

//lrh for every row;    
    int lrh(vector<int>& arr){
        int n=arr.size();
        int ans=0;
        stack<int> st;
        for(int i=0;i<n;i++){
            while(!st.empty() && (i==n || arr[st.top()] >= arr[i])){
                int height = arr[st.top()];
                st.pop();
                int nse = i;
                int pse = st.empty() ? -1 : st.top();
                ans = max(ans, height * (nse-pse-1));
            }
            st.push(i);
        }
        while(!st.empty()){
            int height = arr[st.top()];
            st.pop();
            int nse = n;
            int pse = st.empty() ? -1 : st.top();
            ans = max(ans, height * (nse-pse-1));
        }
        return ans;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int ans=0;
        int n=matrix.size();
        int m=matrix[0].size();
        vector<int> temp(m);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]-48) temp[j]++;
                else temp[j]=0;
            }
            ans = max(ans,lrh(temp));
        }
        return ans;
    }