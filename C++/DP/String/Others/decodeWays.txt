You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:
"1" -> 'A'
"2" -> 'B'
...
"25" -> 'Y'
"26" -> 'Z'
However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are 
contained in other codes ("2" and "5" vs "25").
Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.


    bool isValid(string s){
        if(1 <= stoi(s) && stoi(s) <= 26) return true;
        return false;
    }
    int solve(int i, int n, string s, vector<int>& dp){
        if(i==n) return 1;
        if(s[i]=='0') return 0;
        if(dp[i]!=-1) return dp[i];
        int one=solve(i+1,n,s,dp), two=0;
        if(i<n-1 && isValid(s.substr(i,2))) two=solve(i+2,n,s,dp);
        return dp[i]=one+two;
    }
    int numDecodings(string s) {
        vector<int> dp(s.length(),-1);
        return solve(0,s.length(),s,dp);
    }