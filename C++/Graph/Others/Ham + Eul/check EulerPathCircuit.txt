****************************************************************undirected************************************************************
An Eulerian Path is a path in graph that visits every edge exactly once. An Eulerian Circuit is an Eulerian Path which starts and 
ends on the same vertex. Given an undirected connected graph with V nodes, and E edges, with adjacency list adj, return 2 if the 
graph contains an eulerian circuit, else if the graph contains an eulerian path, return 1, otherwise, return 0.


Eulerian Cycle: An undirected graph has Eulerian cycle if following two conditions are true. 
1.All vertices with non-zero degree are connected. We don’t care about vertices with zero degree because they don’t belong to Eulerian Cycle or Path (we only consider all edges). 
2.All vertices have even degree.

Eulerian Path: An undirected graph has Eulerian Path if following two conditions are true. 
1.Same as condition (a) for Eulerian Cycle.
2.If zero or two vertices have odd degree and all other vertices have even degree. Ep will start one and end on another.


    void dfs(int node, vector<int> adj[], vector<int>& vis){
        vis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]) dfs(it,adj,vis);
        }
    }
    int isEulerCircuit(int V, vector<int>adj[]){
        vector<int> deg(V),vis(V);
        int countOddDeg=0;
        for(int i=0;i<V;i++){
            deg[i]=adj[i].size();
            countOddDeg += deg[i]&1;
        }
        
        if(countOddDeg!=0 && countOddDeg!=2) return 0;
        
        for(int i=0;i<V;i++){
            if(deg[i]){
                dfs(i,adj,vis);
                break;
            }
        }
        for(int i=0;i<V;i++){
            if(deg[i] && !vis[i]) return 0;
        }
        
        if(!countOddDeg) return 2;
        return 1;
    }

    // euler cycle in undirected
/*
    stack<int> st;
    st.push(1);
    vector<int> circuit, used(m + 1);

    while (!st.empty())
    {
        int cur = st.top();
        if (deg[cur])
        {
            int next = adj[cur].back().first;
            int edge = adj[cur].back().second;
            adj[cur].pop_back();
            if (!used[edge])
            {
                deg[cur]--;
                deg[next]--;
                used[edge] = 1;
                st.push(next);
            }
        }
        else
        {
            circuit.push_back(cur);
            st.pop();
        }
    }

    if ((int)circuit.size() != m + 1)
        printf("IMPOSSIBLE\n");
    else
    {
        for (int v : circuit)
            cout << v << " ";
    }
*/


****************************************************************directed**************************************************************

Eulerian circuit in directed graphs: a directed graph has an Eulerian circuit if and only if the following conditions are met:

1.All vertices have equal in-degree and out-degree.
2. all non zero degree vertices are strongly connected -> The graph is strongly connected 
(or, more generally, has a single strongly connected component).

    If the graph has one component and equal in-degree and out-degree at every vertex, 
    the conditions are sufficient to imply that the graph is strongly connected.

Conclusion:
If the graph is given to have a single component and equal in-degree and out-degree for every vertex, 
then the graph must be strongly connected.


    void dfs(int node,vector<vector<int>>& adj,vector<int>& vis){
    	vis[node]=1;
    	for(auto x:adj[node]){
    		if(!vis[x]){
    			dfs(x,adj,vis);
    		}
    	}
    }
    int isCircle(vector<vector<int>>& adj) {
        int n=adj.size();
        vector<int> inDeg(n), outDeg(n), vis(n);
        for(int i=0;i<n;i++){
            outDeg[i]=adj[i].size();
            for(auto it:adj[i]){
                inDeg[it]++;
            }
        }
        for(int i=0;i<V;i++){
            if(deg[i]){
                dfs(i,adj,vis);
                break;
            }
        }
        for(int i=0;i<n;i++){
            if(inDeg[i]!=outDeg[i] || (inDeg[i] && !vis[i])) return 0;
        }
        return 1;
    }

----------------------------------For isEulerPath in directed graph----------------------------------------

An Euler path is a path in a graph that visits every edge exactly once. 
For a directed graph, the following conditions must be met for an Euler path to exist between any two vertices:

1.Out-degree and In-degree Condition:
    -For a directed graph to have an Euler path:
    -All vertices except for two must have an equal in-degree and out-degree.
    -One of the two exceptional vertices (the starting vertex) must have exactly one more out-degree than in-degree.
    -The other exceptional vertex (the ending vertex) must have exactly one more in-degree than out-degree.

2.Strong Connectivity Condition:
    -The graph must be weakly connected (i.e., when treating the graph as undirected, there should be a path between every pair of vertices).
    -Every vertex with nonzero in-degree and out-degree should be part of a strongly connected component (you should be able to reach any such vertex starting from any other in this component via directed edges).

    //code EP in directed to check if start is 1 and end is n

    int main()
    {
    #ifndef ONLINE_JUDGE
        freopen("../input.txt", "r", stdin);
        freopen("../output.txt", "w", stdout);
    #endif
        int n, m;
        cin >> n >> m;
        vector<int> adj[n + 1], vis(n + 1), inDeg(n + 1), outDeg(n + 1), comp, path;
        for (int i = 0; i < m; i++)
        {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            inDeg[v]++;
            outDeg[u]++;
        }

        dfs(1, comp, vis, adj);
        bool exist = vis[n] && (inDeg[1] + 1 == outDeg[1]) && (inDeg[n] == outDeg[n] + 1);
        for (auto node : comp)
        {
            if (node == 1 || node == n)
                continue;
            exist &= (inDeg[node] == outDeg[node]);
        }
        for (int i = 1; i <= n; i++)
        {
            if ((inDeg[i] || outDeg[i]) && !vis[i])
            {
                exist = false;
                break;
            }
        }
        if (!exist)
        {
            cout << "IMPOSSIBLE";
            return 0;
        }
        stack<int> st;
        st.push(1);
        while (!st.empty())
        {
            int node = st.top();
            if (!adj[node].empty())
            {
                int it = adj[node].back();
                adj[node].pop_back();
                st.push(it);
            }
            else
            {
                path.push_back(node);
                st.pop();
            }
        }
        reverse(path.begin(), path.end());
        for (auto v : path)
            cout << v << " ";
        return 0;
    }