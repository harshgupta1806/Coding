You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. 
In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].


    int minJumps(vector<int>& arr) {
        int cur=0,maxi=0,j=0;
        for(int i=0;i<arr.size()-1;i++){
            maxi=max(maxi,i+arr[i]);
            if(cur==i){
                if(maxi==i) return -1;
                j++;
                cur=maxi;
            }
        }
        return j;
    }

-------------------------------------------------------------------OR------------------------------------------------------------------- 

    int jump(vector<int>& nums) {
        int start=0,end=0,max_end=0,j=0;
        while(end<nums.size()-1){
            for(int i=start;i<=end;i++){
                max_end=max(max_end,i+nums[i]);
            }
            start=end+1;
            end=max_end;
            j++;
        }
        return j;
    }