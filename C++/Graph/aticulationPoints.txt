int timer = 0;
void dfs(int node, int parent, vector<int> adj[], vector<int> &vis, vector<int> &expStart, vector<int> &lowExpStart, vector<int> &isAP)
{
    vis[node] = 1;
    expStart[node] = timer;
    lowExpStart[node] = timer;
    timer++;
    int child = 0;
    for (auto x : adj[node])
    {
        if (x == parent)
            continue;
        if (!vis[x])
        {
            dfs(x, node, adj, vis, expStart, lowExpStart, isAP);
            lowExpStart[node] = min(lowExpStart[node], lowExpStart[x]);
            if (lowExpStart[x] >= expStart[node] && parent != -1)
            {
                isAP[node] = 1;
            }
            child++;
        }
        else
        {
            lowExpStart[node] = min(lowExpStart[node], expStart[x]);
        }
    }
    if (child > 1 && parent == -1)
    {
        isAP[node] = 1;
    }
}
vector<int> articulationPoints(int n, vector<int> adj[])
{
    vector<int> vis(n);
    vector<int> expStart(n);
    vector<int> lowExpStart(n);
    vector<int> isAP(n);
    vector<int> AP;
    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
        {
            dfs(i, -1, adj, vis, expStart, lowExpStart, isAP);
        }
    }
    for (int i = 0; i < n; i++)
    {
        if (isAP[i])
        {
            AP.push_back(i);
        }
    }
    if (!AP.size()){
        return {-1};
    }
    return AP;
}