
class SGT
{
public:
    vector<int> tree;
    SGT(int n)
    {
        tree.resize(4 * n);
    }
    void build(int index, int low, int high, vector<int> &arr)
    {
        if (low == high)
        {
            tree[index] = arr[low];
            return;
        }
        int mid = (low + high) / 2;
        build(2 * index + 1, low, mid, arr);
        build(2 * index + 2, mid + 1, high, arr);
        tree[index] = tree[2 * index + 1] & tree[2 * index + 2];
    }
    void update(int index, int low, int high, int pos, int val)
    {
        if (low == high)
        {
            tree[index] = val;
            return;
        }
        int mid = (low + high) / 2;
        if (pos <= mid)
        {
            update(2 * index + 1, low, mid, pos, val);
        }
        else
        {
            update(2 * index + 2, mid + 1, high, pos, val);
        }
        tree[index] = tree[2 * index + 1] & tree[2 * index + 2];
    }
    int query(int index, int low, int high, int left, int right)
    {
        if (left <= low && high <= right)
        {
            return tree[index];
        }
        else if (high < left || right < low)
        {
            return INT_MAX;
        }
        int mid = (low + high) / 2;
        return query(index * 2 + 1, low, mid, left, right) & query(index * 2 + 2, mid + 1, high, left, right);
    }
};