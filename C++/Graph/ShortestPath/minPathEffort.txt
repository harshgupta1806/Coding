You are a hiker preparing for an upcoming hike. 
You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col).
You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) 
(i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
Return the minimum effort required to travel from the top-left cell to the bottom-right cell.


    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> dis(n,vector<int>(m,INT_MAX));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
        pq.push({0,{0,0}});
        dis[0][0]=0;
        int cx[4]={-1,0,1,0};
        int cy[4]={0,1,0,-1};
        while(!pq.empty()){
            int e=pq.top().first;
            int r=pq.top().second.first;
            int c=pq.top().second.second;
            if(r==n-1 && c==m-1) return e;
            pq.pop();
            for(int i=0;i<4;i++){
                int nr=r+cx[i];
                int nc=c+cy[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m){
                    int eff = max(e,abs(heights[nr][nc]-heights[r][c]));
                    if(dis[nr][nc] > eff){
                        dis[nr][nc]=eff;
                        pq.push({eff,{nr,nc}});
                    }
                }
            }
        }
        return 0;
    }