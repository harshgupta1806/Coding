Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. 

// aproach -> for index i find psi and nsi and for all subarrays btw psi and nsi i will be minimum.
-> all those subarrays will contribute that element.

// To avoid dublicate subarray in psi or in nsi take prev smaller or equal element  OR next smaller or equal element 

    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<int> psi(n,-1), nsi(n,n);
        stack<int> st;
        for(int i=0;i<n;i++){
            while(!st.empty() && arr[st.top()] >= arr[i]) st.pop();
            if(!st.empty()) psi[i]=st.top();
            st.push(i);
        }
        while(!st.empty()) st.pop();
        for(int i=n-1;i>=0;i--){
            while(!st.empty() && arr[st.top()] > arr[i]) st.pop();
            if(!st.empty()) nsi[i]=st.top();
            st.push(i);
        }
        long long ans=0, mod = 1e9+7;
        for(int i=0;i<n;i++){
            long long left = i - psi[i]; -------------------------> no. of elements on left 
            long long right = nsi[i] - i; -------------------------> no. of elements on right
                                            -------------------------> arr[i] will be contributed by left*right subarrays
            ans = (ans + arr[i]*left*right)%mod;
        }
        return ans;
    }