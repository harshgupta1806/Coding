int timer=1;
void dfs(int node, int parent, vector<int>& str, vector<int>& crm, vector<int>& vis, vector<int>& isAp, vector<int> adj[]){
    vis[node]=1;
    str[node]=timer;
    crm[node]=timer;
    timer++;
    int noOfChilds=0;
    for(auto it:adj[node]){
        if(it == parent) continue;
        if(!vis[it]){
            dfs(it,node,str,crm,vis,isAp,adj);
            crm[node]=min(crm[node],crm[it]);
            if(str[node] <= crm[it] && parent != -1){
                isAp[node]=1;
            }
            noOfChilds++;
        }else{
            crm[node]=min(crm[node],str[it]);
        }
    }
    if(noOfChilds > 1 && parent==-1) isAp[node]=1;
}
vector<int> articulationPoints(int V, vector<int>adj[]) {
    vector<int> str(V), crm(V), vis(V), isAp(V), APs;
    dfs(0,-1,str,crm,vis,isAp,adj);
    for(int i=0;i<V;i++) if(isAp[i]) APs.push_back(i);
    if(!APs.size()) return {-1};
    return APs;
}