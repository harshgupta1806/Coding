You are given timings of n meetings in the form of (start[i], end[i]) where start[i] is the start time of meeting i 
and end[i] is the finish time of meeting i. 
Return the maximum number of meetings that can be accommodated in a single meeting room, 
when only one meeting can be held in the meeting room at a particular time. 
Note: The start time of one chosen meeting can't be equal to the end time of the other chosen meeting.



    int maxMeetings(int n, int start[], int end[]) {
        vector<pair<int,int>> meet;
        int i,ans=1;
        for(i=0;i<n;i++) meet.push_back({start[i],end[i]});
        sort(meet.begin(),meet.end(),[](pair<int,int>& a, pair<int,int>& b){return a.second<b.second;});
        int j=0;i=1;
        while(i<n){
            if(meet[i].first > meet[j].second){
                ans++;
                j=i;
                i++;
            }else i++;
        }
        return ans;
    }