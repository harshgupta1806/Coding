//max sum of a subarray
int kadane(int n, vector<int> v)
{
    int sum = 0;
    int maxS = INT_MIN;
    for (int i = 0; i < n; i++)
    {
        sum += v[i];
        maxS = max(sum, maxS);
        if (sum < 0)
        {
            sum = 0;
        }
    }
    return maxS;
}


// IF ASKED TO RETURN THE SUBARRAY WITH MAX SUM //TODO

int maxSubArray(vector<int>& nums) {
        int ans = 0;
        int res = 0;
        int left = -1, right = -1;
        int max_left = -1, max_right = -1;
        for(int i = 0; i<nums.size(); i++)
        {
            ans = ans + nums[i];
            if(ans >= 0){
                if(left == -1)  
                {
                    left = i;
                    right = i;
                }
                if(res <= ans)
                {
                    max_left = left;
                    max_right = i;
                    res = ans;
                }
            }
            else 
                right++;
            if(ans < 0){
                ans = 0;
                left = -1;
                right = -1;
            }
        }

        if(res == 0)
        {
            res = INT_MIN;
            for(int i = 0; i<nums.size(); i++)
            {
                res = max(res, nums[i]);
            }
            cout << res << endl;
        }
        else
        {
            for(int i = max_left; i<= max_right; i++)
                cout << nums[i] << " ";
        }
        cout << endl;
        return res;
    }