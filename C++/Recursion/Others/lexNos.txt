Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.
//TODO
    void solve(int i, int n, vector<int>& ans){
        ans.push_back(i);
        for(int k=0;k<=9;k++){
            int num = i*10 + k;
            if(num <= n) solve(num,n,ans);
        }
    }
    vector<int> lexicalOrder(int n) {
        vector<int> ans;
        for(int i=1;i<=min(n,9);i++){
            solve(i,n,ans);
        }
        return ans;
    }

---------------------------------------------------------------OR---------------------------------------------------------------------------

    void solve(int i, int n, vector<int>& ans){
        if(i>n) return;
        if(i) ans.push_back(i); 
        for(int k=(i?0:1);k<=9;k++){
            int num = i*10 + k;
            if(num <= n) solve(num,n,ans);
        }
    }
    vector<int> lexicalOrder(int n) {
        vector<int> ans;
        solve(0,n,ans);
        return ans;
    }

---------------------------------------------------------kth in lexicalOrder------------------------------------------------------------------

    int getCnt(long num, long n){
        long start=num, end=num, count=0;
        while(start<=n){
            count += min(n,end)-start+1;
            start*=10;
            end=end*10+9;
        }
        return count;
    }
    int findKthNumber(int n, int k) {
        int num=1;
        k--;
        while(k>0){
            long count=getCnt(num,n);
            if(count<=k){
                num++;
                k-=count;
            }else{
                num*=10;
                k--;
            }
        }
        return num;
    }