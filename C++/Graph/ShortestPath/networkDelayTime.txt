You are given a network of n nodes, labeled from 1 to n. 
You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), 
where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. 
If it is impossible for all the n nodes to receive the signal, return -1.


    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<pair<int,int>> adj[n+1];
        for(auto t:times){
            adj[t[0]].push_back({t[1],t[2]});
        }
        vector<int> time(n+1,1e9);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,k});
        time[k]=0;
        while(!pq.empty()){
            int t=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int adjNode=it.first;
                int ew=it.second;
                if(time[adjNode] > t+ew){
                    time[adjNode] = t+ew;
                    pq.push({time[adjNode],adjNode});
                }
            }
        }
        int ans=-1;
        for(int i=1;i<=n;i++) ans=max(ans,time[i]);
        if(ans==1e9) return -1;
        return ans;
    }