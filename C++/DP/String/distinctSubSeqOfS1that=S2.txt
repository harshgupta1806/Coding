Given two strings s and t, return the number of distinct subsequences of s which equals t.

    int solve(int i, int j, string s, string t, vector<vector<int>>& dp){
        if(j<0) return 1;
        if(i<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==t[j]) return dp[i][j] = solve(i-1,j-1,s,t,dp)+solve(i-1,j,s,t,dp);
        return dp[i][j] = solve(i-1,j,s,t,dp);
    }
    int numDistinct(string s, string t) {
        int n=s.length(),m=t.length();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return solve(n-1,m-1,s,t,dp);
    }


//Tabulation

    int numDistinct(string s, string t) {
        int n=s.length(),m=t.length();
        vector<vector<double>> dp(n+1,vector<double>(m+1,0));

        for(int i=0;i<=n;i++) dp[i][0]=1;
        for(int j=1;j<=m;j++) dp[0][j]=0;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
                else dp[i][j]=dp[i-1][j];
                }
        }
        return (int)dp[n][m];
    }

//Optimised Tabulation

    int numDistinct(string s, string t) {
        int n=s.length(),m=t.length();
        vector<double> pre(m+1),cur(m+1);
        pre[0]=1;cur[0]=1;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) cur[j]=pre[j-1]+pre[j];
                else cur[j]=pre[j];
            }
            pre=cur;
        }
        return (int)cur[m];
    }

##################################################### 1D Tabulation ################################################################33

    int numDistinct(string s, string t) {
        int n=s.length(),m=t.length();
        vector<double> dp(m+1,0);
        dp[0]=1;
        for(int i=1;i<=n;i++){
            for(int j=m;j>=1;j--){
                if(s[i-1]==t[j-1]) dp[j]=dp[j-1]+dp[j];
            }
        }
        return (int)dp[m];
    }