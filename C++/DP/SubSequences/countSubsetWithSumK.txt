Given an array arr of size n of non-negative integers and an integer sum, 
the task is to count all subsets of the given array with a sum equal to a given sum.

//Recursion

	int mod=1e9+7;
	int solve(int i, int t, int n, int arr[], vector<vector<int>>& dp){
	    if(i==n){
	        if(!t) return 1;
	        return 0;
	    }
	    if(dp[i][t]!=-1) return dp[i][t];
	    int np=solve(i+1,t,n,arr,dp);
	    int p=0;
	    if(arr[i]<=t) p=solve(i+1,t-arr[i],n,arr,dp);
	    return dp[i][t]=(p%mod+np%mod)%mod;
	}
	int perfectSum(int arr[], int n, int t)
	{
	    vector<vector<int>> dp(n,vector<int>(t+1,-1));
        return solve(0,t,n,arr,dp);
	}



//Tabulation

	int perfectSum(int arr[], int n, int sum)
	{
		vector<vector<int>> dp(n,vector<int>(sum+1,0));
		int mod=1e9+7;
		for(int i=0;i<n;i++) dp[i][0]=1;
		if(arr[0]<=sum) dp[0][arr[0]]=1;
		if(arr[0]==0) dp[0][0]=2; -----------------------------------To account for 0 in array
		for(int i=1;i<n;i++){
			for(int j=0;j<=sum;j++){
				int temp=0;
				if(j-arr[i]>=0) temp=dp[i-1][j-arr[i]];
				dp[i][j]=(dp[i-1][j] + temp)%mod;
			}
		}
		return dp[n-1][sum];
	}