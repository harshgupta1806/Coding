Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:
    0 <= i < j < nums.length and
    nums[i] > 2 * nums[j].


    void merge(vector<int>& arr, int l, int m, int h){
        vector<int> temp;
        int i = l, j=m+1;
        while(i<=m && j<=h){
            if(arr[i] <= arr[j]) temp.push_back(arr[i++]);
            else temp.push_back(arr[j++]);
        }
        while(i<=m) temp.push_back(arr[i++]);
        while(j<=h) temp.push_back(arr[j++]);
        for(int i=l;i<=h;i++) arr[i]=temp[i-l];
    }
    int countPairs(vector<int>& arr, int l, int m, int h){
        int right=m+1,count=0;
        for(int i=l;i<=m;i++){
            while(right <= h && arr[i] > (long long)2*arr[right]) right++;
            count += right - m - 1;
        }
        return count;
    }
    int mergeSort(vector<int> &arr, int l, int h){
        int count=0;
        if(l>=h) return 0;
        int m=l+(h-l)/2;
        count+=mergeSort(arr,l,m);
        count+=mergeSort(arr,m+1,h);
        count+=countPairs(arr,l,m,h);
        merge(arr,l,m,h);
        return count;
    }
    int reversePairs(vector<int>& arr) {
        return mergeSort(arr,0,arr.size()-1);
    }