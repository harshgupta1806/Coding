Given a string s, partition s such that every substring of the partition is a palindrome. 
Return all possible palindrome partitioning of s.


    bool isPal(string& s){
        int i=0,j=s.length()-1;
        while(i<=j){
            if(s[i++]!=s[j--]) return false;
        }
        return true;
    }
    void solve(int ind, int n, string s, vector<string>& temp, vector<vector<string>>& ans){
        if(ind==n){
            ans.push_back(temp);
            return;
        }
        for(int i=ind;i<n;i++){
            string str=s.substr(ind,i-ind+1);
            if(isPal(str)){
                temp.push_back(str);
                solve(i+1,n,s,temp,ans);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        int n=s.length();
        solve(0,n,s,temp,ans);
        return ans;
    }   