Given a triangle array, return the minimum path sum from top to bottom.
For each step, you may move to an adjacent number of the row below. 
More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.


    int solve(int r, int c, int n, vector<vector<int>>& triangle, vector<vector<int>>& dp){
        if(r==n-1) return triangle[r][c];
        if(dp[r][c]!=-1) return dp[r][c];
        int down = solve(r+1,c,n,triangle,dp);
        int right = solve(r+1,c+1,n,triangle,dp);
        return dp[r][c]=triangle[r][c]+min(down,right);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return solve(0,0,n,triangle,dp);
    }


------------------------------------------------------------------------------------------------------------------------------------------
//Tabulation Top-Down

    dp[0][0]=triangle[0][0];
    for(int i=1;i<n;i++){
        for(int j=0;j<=i;j++){
            if(j==0) dp[i][j]=triangle[i][j]+dp[i-1][j];
            else if(j==i) dp[i][j]=triangle[i][j]+dp[i-1][j-1];
            else{
                int up=dp[i-1][j];
                int left=dp[i-1][j-1];
                dp[i][j]=triangle[i][j]+min(up,left);
            }
        }
    }
    int ans=INT_MAX;
    for(auto i:dp[n-1]) ans=min(ans,i);
    return ans;

------------------------------------------------------------------------------------------------------------------------------------------
//Tabulation Bottom-Up

    int minimumTotal(vector<vector<int>>& tr) {
        int n=tr.size();
        vector<vector<int>> dp(n,vector<int>(n));
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<=i;j++){
                if(i==n-1) dp[i][j]=tr[i][j];
                else dp[i][j]=tr[i][j]+min(dp[i+1][j],dp[i+1][j+1]);
            }
        }
        return dp[0][0];
    }