//TODO watch video
---------------------------------------------best for arrays with only positives >0 --------------------------------------------
int longestSubarrayWithSumK(vector<int> a, long long k)
{
    int r = 0, l = 0;
    int n = a.size();
    int s = a[0];
    int len = 0;
    while (r < n)
    {
        while (l <= r && s > k)
         {
            s -= a[l];
            l++;
        }
        if (s == k)
        {
            l = max(l, r - l + 1);
        }
        r++;
        if (r < n)
        {
            s += a[r];
        }
    }
}

-----------------------------------------------generate all subarraay with sum=k(all types of elements)------------------------------------------------------
vector<vector<int>> subarraysWithSumK(vector<int> a, long long k)
{
    vector<vector<int>> all;
    map<int, int> mp;
    int n = a.size();
    int sum = 0;
    for (int i = 0; i < n; i++)
    {
        sum += a[i];
        if (sum == k)
        {
            vector<int> temp(a.begin(), a.begin() + i + 1);
            all.push_back(temp);
        }
        if (mp.find(sum - k) != mp.end())
        {
            vector<int> temp(a.begin() + mp[sum - k]+1, a.begin() + i + 1);
            all.push_back(temp);
        }
        if (mp.find(sum) == mp.end()) {
            mp[sum] = i;
        }
    }
    return all;
}

--------------------------------------------------for arrays with any kind of elements----------------------------------------------------
int lenOfLongSubarr(int A[],  int N, int K) 
{ 
    map<int,int> mp;
    int i=0,s=0,ans=0;
    while(i<N){
        s+=A[i];
        if(s==K) ans=max(ans,i+1);
        if(mp.find(s-K) != mp.end()){
            ans=max(ans,i-mp[s-K] );
        }
        if(mp.find(s) == mp.end()) mp[s]=i;
        i++;
    }
    return ans;
} 

----------------------------------------no. of subarraay with sum = k------------------------------------------------------------

    int subarraySum(vector<int>& nums, int k) {
        map<int,int> mp;
        int s=0;
        mp[0]=1;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            s+=nums[i];
            if(mp.find(s-k)!=mp.end()){
                ans+=mp[s-k];
            }
            if(mp.find(s)==mp.end()){
                mp[s]=1;
            }else mp[s]++;
        }
        return ans;
    }

//similar

    int subarraySum(vector<int>& nums, int k) {
        map<int,int> mp;
        int s=0;
        mp[0]=1;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            s+=nums[i];
            ans+=mp[s-k];
            mp[s]++;
        }
        return ans;
    }

--------------------------------------------------print subarraay with max sum-------------------------------------------------------------------

//TODO

int maxSubArray(vector<int>& nums) {
        int ans = 0;
        int res = 0;
        int left = -1, right = -1;
        int max_left = -1, max_right = -1;
        for(int i = 0; i<nums.size(); i++)
        {
            ans = ans + nums[i];
            if(ans >= 0){
                if(left == -1)  
                {
                    left = i;
                    right = i;
                }
                if(res <= ans)
                {
                    max_left = left;
                    max_right = i;
                    res = ans;
                }
            }
            else 
                right++;
            if(ans < 0){
                ans = 0;
                left = -1;
                right = -1;
            }
        }

        if(res == 0)
        {
            res = INT_MIN;
            for(int i = 0; i<nums.size(); i++)
            {
                res = max(res, nums[i]);
            }
            cout << res << endl;
        }
        else
        {
            for(int i = max_left; i<= max_right; i++)
                cout << nums[i] << " ";
        }
        cout << endl;
        return res;
    }