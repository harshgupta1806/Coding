----------------------------------------------------Using Floyd's--------------------------------------------
    ListNode* hasCycle(ListNode *head) {
        if(!head) return NULL;
        ListNode *fast=head, *slow=head;
        while(fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast) return slow;
        }
        return NULL;
    }
    ListNode *detectCycle(ListNode *head) {
        ListNode *temp1=head, *temp2=hasCycle(head);
        if(!temp2) return NULL;
        while(temp1 != temp2){
            temp1=temp1->next;
            temp2=temp2->next;
        }
        return temp1;
    }
    
----------------------------------------------------Using brent's--------------------------------------------

    ListNode *detectCycle(ListNode *head) {
        if(!head) return NULL;
        ListNode *fast=head->next, *slow=head;
        int len=1, power=1;
        while(fast && fast!=slow){
            if(len==power){
                slow=fast;
                len=0;
                power*=2;
            }
            fast=fast->next;
            len++;
        }
        if(!fast) return NULL; // no cycle
        
        slow=fast=head;
        while(len--) fast=fast->next;
        while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
        }
        return fast;
    }