---------------------------------------------best for arrays with only positives >0 --------------------------------------------
int longestSubarrayWithSumK(vector<int> a, long long k)
{
    int r = 0, l = 0;
    int n = a.size();
    int s = 0;
    int len = 0;
    while (r < n)
    {
        s += a[r];
        while (l <= r && s > k){
            s -= a[l];
            l++;
        }
        if (s == k){
            l = max(l, r - l + 1);
        }
        r++;
    }
}

-----------------------------------------------generate all subarraay with sum=k------------------------------------------------------
vector<vector<int>> subarraysWithSumK(vector<int> a, long long k)
{
    vector<vector<int>> all;
    map<int, int> mp;
    int n = a.size();
    int sum = 0;
    for (int i = 0; i < n; i++)
    {
        sum += a[i];
        if (sum == k)
        {
            vector<int> temp(a.begin(), a.begin() + i + 1);
            all.push_back(temp);
        }
        if (mp.find(sum - k) != mp.end())
        {
            vector<int> temp(a.begin() + mp[sum - k]+1, a.begin() + i + 1);
            all.push_back(temp);
        }
        if (mp.find(sum) == mp.end()) {
            mp[sum] = i;
        }
    }
    return all;
}

--------------------------------------------------for arrays with any kind of elements----------------------------------------------------

    int lenOfLongestSubarr(vector<int>& arr, int k) {
        map<int,int> mp;
        mp[0]=-1;
        int i=0,s=0,ans=0,n=arr.size();
        while(i<n){
            s+=arr[i];
            // if(s==K) ans=max(ans,i+1);
            if(mp.find(s-k) != mp.end()){
                ans=max(ans,i-mp[s-k] );
            }
            if(mp.find(s) == mp.end()) mp[s]=i;
            i++;
        }
        return ans;
    }

-----------------------------------------------------no. of subarraay with sum = k------------------------------------------------------------

    int subarraySum(vector<int>& nums, int k) {
        map<int,int> mp;
        int s=0;
        mp[0]=1;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            s+=nums[i];
            if(mp.find(s-k)!=mp.end()){
                ans+=mp[s-k];
            }
            if(mp.find(s)==mp.end()){
                mp[s]=1;
            }else mp[s]++;
        }
        return ans;
    }