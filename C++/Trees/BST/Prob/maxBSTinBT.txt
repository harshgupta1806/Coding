Given a binary tree. Find the size of its largest subtree which is a Binary Search Tree.
Note: Here Size equals the number of nodes in the subtree.


// {size,{curMax,curMin}}
    pair<int,pair<int,int>> solve(Node* root){

        if(!root) return {0,{INT_MIN,INT_MAX}};
        if(!root->left && !root->right) return {1,{root->data,root->data}};
        
        pair<int,pair<int,int>> left = solve(root->left);
        pair<int,pair<int,int>> right = solve(root->right);
        
        int leftSize = left.first, rightSize = right.first;
        int leftMax = left.second.first, leftMin = left.second.second;
        int rightMax = right.second.first, rightMin = right.second.second;
        
        if(root->data > leftMax && root->data < rightMin){
            return {1+leftSize+rightSize,{max(rightMax,root->data),min(leftMin,root->data)}};
        }
        return {max(leftSize,rightSize),{INT_MAX,INT_MIN}};
    }
    int largestBst(Node *root)
    {
        return solve(root).first;
    }


*************************************************************************************************************************************
Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).
//TODO
    int res = 0;
    pair<pair<int, int>, int> solve(TreeNode *root)
    {
        if(root == NULL) return {{INT_MAX, INT_MIN}, 0};
        if(root->left == NULL && root->right == NULL){
            res = max(res, root->val);
            return {{root->val, root->val}, root->val};
        }
        auto l = solve(root->left);
        auto r = solve(root->right);
        if(l.first.second < root->val && r.first.first > root->val){
            res = max(res, l.second + r.second + root->val);
            return {{min(root->val, l.first.first), max(root->val, r.first.second)}, l.second + r.second + root->val};
        }
        res = max({res, l.second, r.second});
        return {{INT_MIN, INT_MAX}, max(l.second, r.second)};
    }
    int maxSumBST(TreeNode* root) {
        solve(root);
        return res;
    }