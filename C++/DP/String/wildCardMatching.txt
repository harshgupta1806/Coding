Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).


    bool solve(int i, int j, string p, string s, vector<vector<int>>& dp){
        if(j==0 && i==0) return true;
        if(j>0 && i==0) return false;
        if(j==0 && i>0){
            for(int k=i;k>=1;k--){ if(p[k-1]!='*') return false;}
            return true;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[j-1]==p[i-1] | p[i-1]=='?') return dp[i][j]=solve(i-1,j-1,p,s,dp);
        if(p[i-1]=='*') return dp[i][j]=(solve(i-1,j,p,s,dp) | solve(i,j-1,p,s,dp));
        return dp[i][j]=false;
    }
    bool isMatch(string s, string p) {
        int n=p.length();
        int m=s.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1)); 
        return solve(n,m,p,s,dp);
    }

------------------------------------------------------------Tabulation----------------------------------------------------------------------------

    bool isMatch(string s, string p) {
        int n=p.size();
        int m=s.size();
        vector<vector<bool>> dp(n+1,vector<bool>(m+1,false)); 

        dp[0][0]=true; // base case 1
        for(int j=1;j<=m;j++) dp[0][j]=false; // base case 2
        for(int i=1;i<=n;i++){ // base case 3
            if(p[i-1]=='*') dp[i][0]=true;
            else break;
        }

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(p[i-1]==s[j-1] || p[i-1]=='?') dp[i][j]=dp[i-1][j-1];
                else if(p[i-1]=='*') dp[i][j]=(dp[i-1][j] || dp[i][j-1]);
                else dp[i][j]=false;
            }
        }
        return dp[n][m];
    }

---------------------------------------------------------------Optimization-------------------------------------------------------------
     
    bool isMatch(string s, string p) {
        int n=p.size();
        int m=s.size();
        vector<bool> pre(m+1,false), cur(m+1,false); 

        pre[0]=true; // base case 1
        for(int j=1;j<=m;j++) pre[j]=false; // base case 2
        bool flag=true; // for base case 3 
        
        for(int i=1;i<=n;i++){
            if(p[i-1]!='*') flag=false; // for base case 3 
            cur[0]=flag; // for base case 3 
            for(int j=1;j<=m;j++){
                if(p[i-1]==s[j-1] || p[i-1]=='?') cur[j]=pre[j-1];
                else if(p[i-1]=='*') cur[j]=(pre[j] || cur[j-1]);
                else cur[j]=false;
            }
            pre=cur;
        }
        return pre[m];
    }
