Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation 
sequence from beginWord to endWord, or 0 if no such sequence exists.



    int ladderLength(string b, string e, vector<string>& wordList) {
        unordered_set<string> st(wordList.begin(),wordList.end());
        if(st.find(e)==st.end()) return 0;
        queue<pair<string,int>> q;
        q.push({b,1});
        st.erase(b);
        while(!q.empty()){
            string w=q.front().first;
            int d=q.front().second;
            q.pop();
            if(w==e) return d;
            for(auto& x:w){
                char init=x;
                for(char c='a';c<='z';c++){
                    x=c;
                    if(st.find(w)!=st.end()){
                        q.push({w,d+1});
                        st.erase(w);
                    }
                    x=init;
                }
            }
        }
        return 0;
    }