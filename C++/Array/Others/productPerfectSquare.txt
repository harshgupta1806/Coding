You are given a collection of numbers, your task is to find the number of pairs of numbers who product is a perfect square.


    vector<int> isPrime(1e6+1,1);
    void sieve(){
        isPrime[0]=isPrime[1]=0;
        for(int i=2;i*i<=1e6;i++){
            if(isPrime[i]){
                for(int j=i*i;j<=1e6;j+=i){
                    isPrime[j]=0;
                }
            }
        }
    }
    int solve(int num) {
        if (num == 1) return 1;
        unordered_map<int, int> mp;
        for(int i=2;i*i<=num;i++){
            while(!(num%i) && isPrime[i]){
                mp[i]++;
                num/=i;
            }
        }
        if(num>1) mp[num]++;
        int ans = 1;
        for (auto m : mp) {
            if (m.second & 1) {
                ans *= m.first;
            }
        }
        return ans;
    }
    int main() {
        sieve();
        int n;
        cin >> n;
        vector<int> nums(n);
        for (int i = 0; i < n; i++) cin >> nums[i];
        unordered_map<int, int> cnt;
        long long res = 0;
        for (int i = 0; i < n; i++) {
            int p = solve(nums[i]);
            res += cnt[p];
            cnt[p]++;
        }
        cout << res << endl;
        return 0;
    }

