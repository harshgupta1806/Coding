--------------------------------------------------------__builtin_funtions_----------------------------------------------------------------
Number of leading zeroes: __builtin_clz(x)
Number of trailing zeroes : __builtin_ctz(x)
Number of 1-bits (Hamming Weight) : __builtin_popcount(x)
Check the parity of a number : __builtin_parity(x) -->> (odd no. of 1's ? 1 : 0)
Pos of rightmost set bit = __builtin_ffs(16)

---------------------------------------------------------------------------------------------------------------------------------------
-n = 2's(n) = 1's(n) + 1 = ~n + 1
toggle the k-th bit -> n ^ (1 << k)
set all trailing zeros -> n ^ (n - 1)

clear rightmost set bit rest same -> n & (n - 1) -> can be used to check no. of set bits
set rightmost clear bit -> n | (n + 1)

clear all except rightmost set bit -> n & ~(n-1)
pos of rightmost set bit = log2(n & -n) + 1

set the rightmost clear bit else all 0 -> (~n) & (n + 1)
pos of rightmost clear bit = log2((~n) & (n + 1)) + 1

------------------------------------------------check i th bit or set/clear ith-------------------------------------------------------

    ith = (num & 1<<(i-1)) != 0;
    setIth = num | 1<<(i-1);
    clearIth = num & ~(1<<(i-1));

-----------------------------------------------------count set bits-------------------------------------------------------
    1.theta(total bits)-> right shifting and checking lsb
    2.Brian Kernighan's Algorithm
        (subtract 1 from a no. then all clear bits after the last set bit becomoes set and last set bit gets clear)
        ->theta(total set bits)
        int countSetBits(int n){
            int res=0;
            while(n){
                n=n&(n-1);
                res++;
            }
            return res;
        }
    3.constant time + preprocessing
        int table[256];//storing no. of set bits in all 255 nos
        table[0]=0;
        for(int i=1;i<256;i++){
            table[i]=(i&1) + table[i/2];
        }
        int res=0;
        res+=table[n & 0xff];
        n=n>>8;
        res+=table[n & 0xff];
        n=n>>8;
        res+=table[n & 0xff];
        n=n>>8;
        res+=table[n & 0xff];
        return res;

-------------------------------------------------------pow(2,k)==(1<<k)--------------------------------------------------------

-------------------------------------------------------check if pow of 2----------------------------------------------------------
    (n & (n-1)) == 0  -> true if pow of 2

-----------------------------------------------------------XOR-------------------------------------------------------------------

    x ^ 0 = x
    x ^ x = 0
    0 ^ 1 = 1
    0 ^ 0 = 1 ^ 1 = 0 

-----------------------------------------------------min bit flip to convert-------------------------------------------------------------
    int minBitFlips(int start, int goal) {
        int x=start^goal,c=0;
        while(x){x&=(x-1);c++;}
        return c;
    }

-------------------------------------------------------upr case to lower case-------------------------------------------------------
    char | ' ' //or with 32(set 5th bit)

----------------------------------------------------------lower to upr---------------------------------------------------------
    char & '_' //and with ~32(clear 5th bit)

-------------------------------------------------------count of set bits till N-------------------------------------------------------

    int countSetBits(int N)
    {
        int d=2,sum=0;
        while(d/2 <= N+1){
            sum += ((N+1) / d) * (d / 2) + max(((N + 1) % d) - d / 2, 0);
            d*=2;
        }
        return sum;
    }

-----------------------------------------------pos of rightmost set bit---------------------------------------------------------
    log(n & ~(n-1)) + 1

-----------------------------------------------------XOR of 1 to n ---------------------------------------------------------
    xor_1_to_n(n)
    {
        if(n%4==0) return n;
        if(n%4==1) return 1;
        if(n%4==2) return n+1;
        if(n%4==3) return 0;
    }

----------------------------------------------------xor from L to R-------------------------------------------------------------------

    return xor_1_to_n(r) ^ xor_1_to_n(l-1)

-------------------------------Count of numbers (x) smaller than or equal to n such that n+x = n^x-----------------------------------------------------------
    count = pow(2, count of zero bits)            

---------------------------------------------------------binary to integer--------------------------------------------------------------------
int main()
{
    int number = 0b011;
    cout << number;
    return 0;
}
---------------------------------------------------------swap two numbers:-----------------------------------------------------------
a ^= b;
b ^= a; 
a ^= b;

--------------------------------------------------------------set all bit----------------------------------------------------------------
    {
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
    }

----------------------------------------------check if only first and last bits are set--------------------------------------------------
    all powers of 2 + 1

-------------------------------------------------------Extract k bits from position p--------------------------------------------------

    (n >> p) & ((1 << k) - 1)

------------------------------------------------------Rotate left by k positions------------------------------------------------------
    (n << k) | (n >> (32 - k))

------------------------------------------------------Rotate right by k positions:------------------------------------------------------
    (n >> k) | (n << (32 - k))

------------------------------------------------------Clearing All Bits from LSB to i-th Bit------------------------------------------------------
    n & ~((1 << (i + 1)) - 1)

------------------------------------------------------Clearing All Bits from MSB to i-th Bit------------------------------------------------------
    n & ((1 << (i + 1)) - 1)

----------------------------------------------------------min bit flips to convert----------------------------------------------------------------------------------------------------------

    int minBitFlips(int start, int goal) {
        int x=start^goal,c=0;
        while(x){x&=(x-1);c++;}
        return c;
    }