
    void solve(vector<int>& nums, vector<int>& cur, vector<int>& picked, vector<vector<int>>& ans){
        if(cur.size()==nums.size()){
            ans.push_back(cur);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(!picked[i]){
                picked[i]=1;
                cur.push_back(nums[i]);
                solve(nums,cur,picked,ans);
                cur.pop_back();
                picked[i]=0;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        vector<int> cur,picked(n);
        vector<vector<int>> ans;
        solve(nums,cur,picked,ans);
        return ans;
    }

----------------------------------------------------------------OR--------------------------------------------------------------------------------------------------------------

    void solve(int index, int n, vector<int>& nums, vector<vector<int>>& ans){
        if(index==n-1){
            ans.push_back(nums);
            return;
        }
        for(int i=index;i<n;i++){
            swap(nums[index],nums[i]);
            solve(index+1,n,nums,ans);
            swap(nums[index],nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> ans;
        solve(0,n,nums,ans);
        return ans;
    }