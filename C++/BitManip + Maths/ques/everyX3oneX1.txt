Given an integer array nums where every element appears three times except for one, which appears exactly once. 
Find the single element and return it.


    int singleNumber(vector<int>& nums) {
        int one=0, two=0;
        for(auto n:nums){
            one = (one ^ n) & ~ two;
            two = (two ^ n) & ~ one;
        }
        return one;
    }

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    int singleNumber(vector<int>& nums) {
        int b=0,cnt,ans=0;
        while(b < 32){
            cnt=0;
            for(auto n:nums){
                if(n & (1<<b)) cnt++;
            }
            if(cnt%3) ans |= (1<<b);
            b++;
        }
        return ans;
    }

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    int singleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int ans=INT_MAX;
        for(int i=1;i<nums.size();i+=3){
            if(nums[i] != nums[i-1]) return nums[i-1];
        }
        return nums.back();
    }