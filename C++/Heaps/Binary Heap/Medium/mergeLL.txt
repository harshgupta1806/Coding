    ListNode* push(ListNode* head, int x){
        ListNode * newNode = new ListNode(x);
        if(!head) head=newNode;
        else{
            ListNode* temp=head;
            while(temp->next) temp=temp->next;
            temp->next=newNode;
        }
        return head;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(!lists.size()) return NULL;
        priority_queue<int,vector<int>,greater<int>> pq;
        for(auto a:lists){
            while(a){
                pq.push(a->val);
                a=a->next;
            }
        } 
        ListNode *head=NULL;
        while(!pq.empty()){
            head=push(head,pq.top());
            pq.pop();
        }
        return head;
    }

--------------------------------------------------------------------------------------------------------------------------------------------------

    ListNode* mergesort(ListNode* h1, ListNode* h2){
        if(!h1) return h2;
        if(!h2) return h1;
        if(h1->val > h2->val) return mergesort(h2,h1);
        ListNode* cur=h1, *t1=h1->next, *t2=h2;
        while(t1 && t2){
            if(t1->val < t2->val){
                cur->next=t1;
                t1=t1->next;
            }else{
                cur->next=t2;
                t2=t2->next;
            }
            cur=cur->next;
        }
        cur->next = !t1 ? t2 : t1;
        return h1;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        ListNode* temp=lists[0];
        for(int i=1;i<lists.size();i++){
            temp=mergesort(temp,lists[i]);
        }
        return temp;
    }