//max sum of a subarray
int kadane(int n, vector<int> v)
{
    int sum = 0;
    int maxS = INT_MIN;
    for (int i = 0; i < n; i++)
    {
        sum += v[i];
        maxS = max(sum, maxS);
        if (sum < 0)
        {
            sum = 0;
        }
    }
    return maxS;
}


*********************************************PRINT THE SUBARRAY WITH MAX SUM*********************************************************

    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int s=0,ans=INT_MIN;
        int left=-1, max_left, right=-1, max_right;
        for(int i=0;i<n;i++){
            s+=nums[i];
            if(s>=0){
                if(left==-1){
                    left=i;right=i;
                }
                if(ans < s){
                    ans=s;
                    max_left=left;
                    max_right=i;
                }
            }
            if(s<0){
                left=-1;
                right=-1;
                s=0;
            }
        }
        if(!ans) {int M=*max_element(nums.begin(),nums.end());cout<<M;return M;}
        for(int i=max_left;i<=max_right;i++) cout<<nums[i]<<" ";
        return ans;
    }


********************************************Return the maximum sum of a subarray of size K************************************************************************************************


    long maximumSumSubarray(int K, vector<int> &a , int N){
        long i=0,j=0,s=0,ans=0;
        while(j<N){
            s+=a[j];
            if(j-i+1 > K) s-=a[i++];
            ans=max(ans,s);
            j++;
        }
        return ans;
    }
