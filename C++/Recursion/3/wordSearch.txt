Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are 
horizontally or vertically neighboring. The same letter cell may not be used more than once.


    bool solve(int r, int c, int p ,int n, int m ,int l, vector<vector<char>>& board, string word){
        if(p==l) return true;
        if(!(r>=0 && r<n && c>=0 && c<m)) return false;
        int cx[4]={-1,0,1,0};
        int cy[4]={0,1,0,-1};
        bool ans = false;
        if(board[r][c]==word[p]){
            char temp = board[r][c];
            board[r][c]='#';
            for(int i=0;i<4;i++){
                int nr=r+cx[i];
                int nc=c+cy[i];
                ans = ans || solve(nr,nc,p+1,n,m,l,board,word); 
            }
            board[r][c]=temp;
        }
        return ans;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n=board.size();
        int m=board[0].size();
        int l=word.length();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(solve(i,j,0,n,m,l,board,word)) return true;
            }
        }
        return false;
    }