int solve(int r, int c, int n, vector<vector<int>>& triangle, vector<vector<int>>& dp){
    if(r==n-1) return triangle[r][c];
    if(dp[r][c]!=-1) return dp[r][c];
    int down = solve(r+1,c,n,triangle,dp);
    int right = solve(r+1,c+1,n,triangle,dp);
    return dp[r][c]=triangle[r][c]+min(down,right);
}
int minimumTotal(vector<vector<int>>& triangle) {
    int n=triangle.size();
    vector<vector<int>> dp(n,vector<int>(n,-1));
    return solve(0,0,n,triangle,dp);
}


------------------------------------------------------------------------------------------------------------------------------------------
//Tabulation

dp[0][0]=triangle[0][0];
for(int i=1;i<n;i++){
    for(int j=0;j<=i;j++){
        if(j==0) dp[i][j]=triangle[i][j]+dp[i-1][j];
        else if(j==i) dp[i][j]=triangle[i][j]+dp[i-1][j-1];
        else{
            int up=dp[i-1][j];
            int left=dp[i-1][j-1];
            dp[i][j]=triangle[i][j]+min(up,left);
        }
    }
}
int ans=INT_MAX;
for(auto i:dp[n-1]) ans=min(ans,i);
return ans;