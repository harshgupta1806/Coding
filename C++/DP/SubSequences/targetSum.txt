if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

    int solve(int i, int n, int t, vector<int>& nums,map<pair<int,int>,int>& mp){
        if(i==n) return t==0;
        if(mp.find({i,t})!=mp.end()) return mp[{i,t}];
        int p = solve(i+1,n,t-nums[i],nums,mp);
        int m = solve(i+1,n,t+nums[i],nums,mp);
        return mp[{i,t}]=p+m;
    }
    int findTargetSumWays(vector<int>& nums, int t) {
        int n=nums.size();
        map<pair<int,int>,int> dp;
        return solve(0,n,t,nums,dp);
    }

---------------------------------------------------------------Tabulation------------------------------------------------------------------------
//TODO
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        vector<vector<int>> dp(nums.size(), vector<int>(2 * sum + 1, 0));
        dp[0][sum + nums[0]] = 1; 
        dp[0][sum - nums[0]] = 1; 
        for(int i = 1; i<nums.size(); i++)
        {
            for(int j = 0; j<=sum; j++)
            {
                int ans1 = 0, ans2 = 0;
                if(j + nums[i] < nums.size())
                    ans1 = dp[i-1][j + nums[i]];
                if(j - nums[i] >= 0)
                    ans2 = dp[i-1][j - nums[i]];
                cout << i << "  " << j +sum << "  " << ans1 + ans2 << endl;
                dp[i][j + sum] = ans1 + ans2;
            }
        }
        return dp[nums.size() - 1][target + sum];
    }