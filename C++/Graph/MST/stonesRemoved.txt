On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone,
return the largest possible number of stones that can be removed.


    int removeStones(vector<vector<int>>& stones) {
        int maxRow = 0;
        int maxCol = 0;
        for (auto it : stones) {
            maxRow = max(maxRow, it[0]);
            maxCol = max(maxCol, it[1]);
        }
        DSU ds(maxRow + maxCol + 1);
        unordered_map<int, int> stoneNodes;
        for (auto it : stones) {
            int nodeRow = it[0];
            int nodeCol = it[1] + maxRow + 1;
            ds.ubs(nodeRow, nodeCol);
            stoneNodes[nodeRow] = 1;
            stoneNodes[nodeCol] = 1;
        }

        int cnt = 0;
        for (auto it : stoneNodes) {
            if (ds.fp(it.first) == it.first) {
                cnt++;
            }
        }
        return stones.size() - cnt;
    }


---------------------------------------------------------similar-----------------------------------------------------------

class DSU{
    private:
        vector<int> par,size;
    public:
        DSU(int n){
            par.resize(n);
            size.resize(n,1);
            for(int i=0;i<n;i++) par[i]=i;
        }
        int fp(int n){
            if(par[n]==n) return n;
            return par[n]=fp(par[n]);
        }
        void ubs(int u, int v){
            int pu=fp(u),pv=fp(v);
            if(pu==pv) return;
            if(size[pu]<size[pv]){
                par[pu]=pv;
                size[pv]+=size[pu];
            }else{
                par[pv]=pu;
                size[pu]+=size[pv];
            }
        }
};
class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int r=-1,c=-1,n=stones.size();
        for(auto s:stones){
            r=max(r,s[0]);
            c=max(c,s[1]);
        }
        DSU dsu(r+c+2);
        unordered_set<int> st;
        for(auto s:stones) {dsu.ubs(s[0],s[1]+r+1);st.insert(s[0]);st.insert(s[1]+r+1);}
        for(auto s:st) if(dsu.fp(s)==s) n--;
        return n;
    }
};