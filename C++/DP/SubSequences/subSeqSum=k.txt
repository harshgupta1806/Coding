Given an array of non-negative integers, and a value sum, 
determine if there is a subset of the given set with sum equal to given sum. 



bool solve(int idx, int n, int t, vector<int> &arr, vector<vector<int>>& dp){
    if(!t) return true;
    if(idx==n-1) return arr[idx]==t;
    if(dp[idx][t]!=-1) return dp[idx][t];
    bool notPick=solve(idx+1,n,t,arr,dp);
    bool pick=false;
    if(arr[idx]<=t) pick=solve(idx+1,n,t-arr[idx],arr,dp);
    return dp[idx][t]=pick || notPick;
}
bool isSubsetSum(vector<int>arr, int sum){
    vector<vector<int>> dp(arr.size(),vector<int>(sum+1,-1));
    return solve(0,arr.size(),sum,arr,dp);
}

//Tabulation

    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<int>> dp(n,vector<int>(sum+1,0));
        for(int i=0;i<n;i++) dp[i][0]=1;
        if(arr[0]<=sum) dp[0][arr[0]]=1;
        for(int i=1;i<n;i++){
            for(int j=1;j<=sum;j++){
                int temp=0;
                if(j-arr[i]>=0) temp=dp[i-1][j-arr[i]];
                dp[i][j]=dp[i-1][j] || temp;
            }
        }
        return dp[n-1][sum];
    }