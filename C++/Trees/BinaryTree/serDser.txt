string serialize(TreeNode* root) {
    if(!root) return "";
    string lvl="";
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty()){
        int size=q.size();
        for(int i=0;i<size;i++){
            TreeNode* node=q.front();
            q.pop();
            if(!node){
                lvl+="null,";
                continue;
            }else{
                lvl+=(to_string(node->val)+',');
            }
            q.push(node->left);
            q.push(node->right);
        }
    }
    return lvl;
}
TreeNode* deserialize(string data) {
    if(data.size()==0) return NULL;
    stringstream s(data);
    string str;
    queue<TreeNode*> q;
    getline(s,str,',');
    TreeNode *root=new TreeNode(stoi(str));
    q.push(root);
    while(!q.empty()){
        TreeNode* node=q.front();
        q.pop();
        getline(s,str,',');
        if(str=="null"){
            node->left=NULL;
        }else{
            TreeNode *leftNode=new TreeNode(stoi(str));
            node->left=leftNode;
            q.push(leftNode);
        }
        getline(s,str,',');
        if(str=="null"){
            node->right==NULL;
        }else{
            TreeNode *rightNode=new TreeNode(stoi(str));
            node->right=rightNode;
            q.push(rightNode);
        }
    }
    return root;
}