vector<int> dijkstra_pq(vector<vector<int>> &edge, int vertices, int edges, int source)
{
    vector<vector<pair<int, int>>> adj(vertices);
    for (auto x : edge)
    {
        adj[x[0]].push_back({x[1], x[2]});
        adj[x[1]].push_back({x[0], x[2]});
    }
    vector<int> dis(vertices, INT_MAX);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    dis[source] = 0;
    pq.push({0, source});
    while (!pq.empty())
    {
        int d = pq.top().first;
        int node = pq.top().second;
        pq.pop();
        for (auto x : adj[node])
        {
            int adjNode = x.first;
            int ew = x.second;
            if (d + ew < dis[adjNode])
            {
                dis[adjNode] = d + ew;
                pq.push({dis[adjNode],adjNode});
            }
        }
    }
    return dis;
}

vector<int> dijkstra_set(vector<vector<int>> &edge, int vertices, int edges, int source)
{
    vector<vector<pair<int, int>>> adj(vertices);
    for (auto x : edge)
    {
        adj[x[0]].push_back({x[1], x[2]});
        adj[x[1]].push_back({x[0], x[2]});
    }
    vector<int> dis(vertices, INT_MAX);
    set<pair<int,int>> st;
    dis[source] = 0;
    st.insert({0, source});
    while (!st.empty())
    {
        auto it=*(st.begin());
        int d = it.first;
        int node = it.second;
        st.erase(it);
        for (auto x : adj[node])
        {
            int adjNode = x.first;
            int ew = x.second;
            if (d + ew < dis[adjNode])
            {
                if(dis[adjNode]!=INT_MAX){
                    st.erase({dis[adjNode],adjNode});
                }
                dis[adjNode] = d + ew;
                st.insert({dis[adjNode],adjNode});
            }
        }
    }
    return dis;
}