You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time.
However, you can buy it then immediately sell it on the same day.
Find and return the maximum profit you can achieve.
(can buy and sell multiple time until i!=n but can have only 1 share at a time)
-----------(can only have atmost 2 transactions)-------------------



    int solve(int i, int n, int canBuy, int notr, vector<int>& prices, vector<vector<vector<int>>>& dp){
        if(i==n || notr == 2 ) return 0;
        if(dp[i][canBuy][notr]!=-1) return dp[i][canBuy][notr];
        int profit=0;
        if(canBuy) profit=max(-prices[i]+solve(i+1,n,0,notr,prices,dp), solve(i+1,n,1,notr,prices,dp));
        else profit=max(prices[i]+solve(i+1,n,1,notr+1,prices,dp), solve(i+1,n,0,notr,prices,dp));
        return dp[i][canBuy][notr]=profit;
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        return solve(0,n,1,0,prices,dp);
    }

//Tabulation

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        for(int i=n-1;i>=0;i--){
            for(int canBuy=0;canBuy<=1;canBuy++){
                for(int notr=0;notr<2;notr++){
                    int profit=0;
                    if(canBuy) profit=max(-prices[i]+dp[i+1][0][notr], dp[i+1][1][notr]);
                    else profit=max(prices[i]+dp[i+1][1][notr+1], dp[i+1][0][notr]);
                    dp[i][canBuy][notr]=profit;
                }
            }
        }
        return dp[0][1][0];
    }    


//Optimized Tabulation

    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> cur(2,vector<int>(3,0));
        vector<vector<int>> next(2,vector<int>(3,0));

        for(int i=n-1;i>=0;i--){
            for(int canBuy=0;canBuy<=1;canBuy++){
                for(int notr=0;notr<2;notr++){
                    int profit=0;
                    if(canBuy) profit=max(-prices[i]+cur[0][notr], cur[1][notr]);
                    else profit=max(prices[i]+cur[1][notr+1], cur[0][notr]);
                    next[canBuy][notr]=profit;
                }
            }
            cur=next;
        }
        return cur[1][0];
    }

********************************************************** Alternate way *************************************************************
-> total transaction = 2
conside buy and sell both as transactions so we can do total 4
->dp[n][4];

    int solve(int i, int n, int notr, vector<int>& prices, vector<vector<int>>& dp){
        if(i==n || notr==4) return 0;
        if(dp[i][notr]!=-1) return dp[i][notr];
        int profit;
        if(notr%2==0) profit=max(-prices[i]+solve(i+1,n,notr+1,prices,dp), solve(i+1,n,notr,prices,dp));
        else profit=max(prices[i]+solve(i+1,n,notr+1,prices,dp), solve(i+1,n,notr,prices,dp));
        return dp[i][notr]=profit;
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(4,-1));
        return solve(0,n,0,prices,dp);
    }