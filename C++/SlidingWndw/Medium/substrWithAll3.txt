Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

-> total - substrings with olny 2 = substrings with all 3
    int numberOfSubstrings(string s) {
        map<char,int> mp;
        int i=0,j=0,n=s.length();
        long long total = n*(n+1)/2, cnt=0;
        while(j<n){
            mp[s[j]]++;
            while(mp.size() > 2){
                mp[s[i]]--;
                if(!mp[s[i]]) mp.erase(s[i]);
                i++;
            }
            cnt += (j-i+1);
            j++;
        }
        return (int)total-cnt;
    }


--------------------------------------------------------------------------------------

    int numberOfSubstrings(string s) {
        int i=0,ls_a=-1,ls_b=-1,ls_c=-1,cnt=0;
        while(i<s.length()){
            if(s[i]=='a') ls_a=i;
            else if(s[i]=='b') ls_b=i;
            else ls_c=i;
            if(ls_a!=-1 && ls_b!=-1 && ls_c!=-1){
                cnt += min({ls_a,ls_b,ls_c}) + 1;
            }
            i++;
        }
        return cnt;
    }