/*
    struct Item{
        int value;
        int weight;
    };
*/
    
    double fractionalKnapsack(int w, Item arr[], int n) {
        vector<pair<int,int>> vec;
        for(int i=0;i<n;i++){
            vec.push_back({arr[i].value, arr[i].weight});
        }
        sort(vec.begin(), vec.end(), [](pair<int,int> a, pair<int,int> b){return (((double)a.first/a.second) > ((double)b.first/b.second));});
        double ans=0;
        int i=0;
        while(w>0 && i<n){
            if(vec[i].second <= w){
                ans += vec[i].first;
                w -= vec[i].second;
            }else break;
            i++;
        }
        if(w>0 && i<n) ans += ((double)vec[i].first/vec[i].second * w);
        return ans;
    }