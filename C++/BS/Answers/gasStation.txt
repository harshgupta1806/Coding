We have a horizontal number line. On that number line, we have gas stations at positions 
stations[0], stations[1], ..., stations[N-1], where n = size of the stations array. 
Now, we add k more gas stations so that d, the maximum distance between adjacent gas stations, is minimized.
We have to find the smallest possible value of d. Find the answer exactly to 2 decimal places.

---------------------------------------------------------------O(n*k)------------------------------------------------------------------
    
    double findSmallestMaxDist(vector<int> &stations, int k) {
        sort(stations.begin(),stations.end());
        int ns=stations.size();
        vector<int> howMany(ns-1);
        for(int i=0;i<k;i++){
            double maxDis=0, maxS;
            for(int j=0;j<ns-1;j++){
                double dis = (double)(stations[j+1]-stations[j])/(howMany[j]+1);
                if(dis > maxDis){
                    maxDis=dis;
                    maxS=j;
                }
            }
            howMany[maxS]++;
        }
        double ans=0;
        for(int j=0;j<ns-1;j++){
            double dis = (double)(stations[j+1]-stations[j])/(howMany[j]+1);
            if(dis > ans){
                ans=dis;
            }
        }
        return ans;
    }

---------------------------------------------------------------O(log(n)*k)------------------------------------------------------------------
    
    double findSmallestMaxDist(vector<int> &stations, int k) {
        sort(stations.begin(),stations.end());
        int n=stations.size();
        vector<int> howMany(ns-1);
        priority_queue<pair<double,int>> pq;
        for(int j=0;j<n-1;j++){
            double dis = (double)(stations[j+1]-stations[j])/(howMany[j]+1);
            pq.push({dis,j});
        }
        for(int i=0;i<k;i++){
            double maxDis=pq.top().first, maxS=pq.top().second;
            pq.pop();
            howMany[maxS]++;
            pq.push({(maxDis/(howMany[maxS]+1)),maxS});
        }
        return pq.top().first;
    }

---------------------------------------------------------------O(log(n)*k)------------------------------------------------------------------

    double findSmallestMaxDist(vector<int> &stations, int k) {
        double l=0, h=-1, n=stations.size();
        for(int i=1;i<n;i++) h=max(h,(double)stations[i]-stations[i-1]);
        while(h-l > 1e-4){
            double m=(l+h)/2.0, cnt=0;
            for(int i=1;i<n;i++){
                int c=(stations[i]-stations[i-1])/m;
                if(c*m == (stations[i]-stations[i-1])) c--;
                cnt += c;
            }
            if(cnt > k) l=m;
            else h=m;
        }
        return h;
    }