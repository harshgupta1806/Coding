    void merge(vector<int>& nums1, int n, vector<int>& nums2, int m) {
        int left = n-1;
        int right = 0;
        while(left>=0 && right < m){
            if(nums1[left] <= nums2[right]) break;
            swap(nums1[left--],nums2[right++]);
        }
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
    }

------------------------------------------------------OR(Shell sort)--------------------------------------------------------------
    void swapIfGreater(long long arr1[], long long arr2[], int ind1, int ind2) {
        if (arr1[ind1] > arr2[ind2]) {
            swap(arr1[ind1], arr2[ind2]);
        }
    }
    void merge(vector<int>& nums1, int n, vector<int>& nums2, int m) {
        int len = n + m;
        int gap = (len / 2) + (len % 2);

        while (gap > 0) {
            int left = 0;
            int right = left + gap;

            while (right < len) {
                if (left < n && right >= n) {
                    int i=left, j=right-n;
                    if (nums1[i] > nums2[j]) swap(nums1[i], nums2[j]);
                }
                else if (left >= n) {
                    int i=left-n, j=right;
                    if (nums1[i] > nums2[j]) swap(nums1[i], nums2[j]);
                }
                else {
                    int i=left, j=right;
                    if (nums1[i] > nums2[j]) swap(nums1[i], nums2[j]);
                }
                left++, right++;
            }
            if (gap == 1) break;
            gap = (gap / 2) + (gap % 2);
        }
    }