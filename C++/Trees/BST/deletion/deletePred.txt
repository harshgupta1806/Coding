TreeNode* predeccessor(TreeNode* root)
{
    if(root==NULL)
    return NULL;
    root=root->left;
    while(root && root->right)
    root=root->right;
    return root;
}
TreeNode *deleteNode(TreeNode *root, int key)
{
    if (root == NULL)
        return NULL;
    if (root->val > key)
    {
        root->left = deleteNode(root->left, key);
    }
    else if (root->val < key)
    {
        root->right = deleteNode(root->right, key);
    }
    else
    {
        if (root->left == NULL)
        {
            TreeNode *tmp = root->right;
            delete (root);
            return tmp;
        }
        else if (root->right == NULL)
        {
            TreeNode *tmp = root->left;
            delete (root);
            return tmp;
        }
        else
        {
            TreeNode *pre = predeccessor(root);
            root->val = pre->val;
            root->left = deleteNode(root->left, pre->val);
        }
    }
    return root;
}