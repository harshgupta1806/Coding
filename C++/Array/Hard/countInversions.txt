    long long int merge(vector<long long>& arr, int l, int m, int h){
        vector<long long> temp;
        int i = l, j=m+1, cnt=0;
        while(i<=m && j<=h){
            if(arr[i] <= arr[j]) temp.push_back(arr[i++]);
            else {temp.push_back(arr[j++]);cnt+=m-i+1;}
        }
        while(i<=m) temp.push_back(arr[i++]);
        while(j<=h) temp.push_back(arr[j++]);
        for(int i=l;i<=h;i++) arr[i]=temp[i-l];
        return cnt;
    }
    long long int mergeSort(vector<long long> &arr, int l, int h){
        int count=0;
        if(l>=h) return 0;
        int m=l+(h-l)/2;
        count+=mergeSort(arr,l,m);
        count+=mergeSort(arr,m+1,h);
        count+=merge(arr,l,m,h);
        return count;
    }
    long long int inversionCount(vector<long long> &arr) {
        return mergeSort(arr,0,arr.size()-1);
    }