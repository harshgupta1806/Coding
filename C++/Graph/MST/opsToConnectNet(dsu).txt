There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where
connections[i] = [ai, bi] represents a connection between computers ai and bi.
Any computer can reach any other computer directly or indirectly through the network.
You are given an initial computer network connections.
You can extract certain cables between two directly connected computers, and place them
between any pair of disconnected computers to make them directly connected.
Return the minimum number of times you need to do this in order to make all the computers connected.
If it is not possible, return -1.



    class DSU{
        private:
            vector<int> parent,size;
        public:
            DSU(int n){
                parent.resize(n);
                size.resize(n);
                for(int i=0;i<n;i++){
                    size[i]=1;
                    parent[i]=i;
                }
            }    
            int fp(int u){
                if(parent[u]==u) return u;
                else return parent[u]=fp(parent[u]);
            }
            void ubs(int u, int v){
                int pu=fp(u);
                int pv=fp(v);
                if(pu==pv) return;
                if(size[pu]>size[pv]){
                    parent[pv]=pu;
                    size[pu]+=size[pv];
                }else{
                    parent[pu]=pv;
                    size[pv]+=pu;
                }
            }
    };

    int makeConnected(int n, vector<vector<int>>& connections) {
        int total_edges=0,extra_edges=0;
        DSU ds(n);
        for(auto c:connections){
            total_edges++;
            if(ds.fp(c[0])!=ds.fp(c[1])){
                ds.ubs(c[0],c[1]);
            }else extra_edges++;
        }
        int left_over_systems=n-total_edges+extra_edges-1;
        if(extra_edges>=left_over_systems) return left_over_systems;
        return -1;
    }