Given a string s and a dictionary of strings wordDict,
return true if s can be segmented into a space-separated sequence of one or more dictionary words.
Note that the same word in the dictionary may be reused multiple times in the segmentation.


    bool solve(int i, int j, int n, string s, map<string,int>& mp, vector<vector<int>>& dp){
        string str=s.substr(i,j-i+1);
        if(j==n) return mp[str];
        if(dp[i][j]!=-1) return dp[i][j];
        if(!mp[str]) return dp[i][j]=solve(i,j+1,n,s,mp,dp);
        return dp[i][j]=solve(j+1,j+1,n,s,mp,dp) || solve(i,j+1,n,s,mp,dp);
    }
    bool wordBreak(string s, vector<string>& dic) {
        map<string,int> mp;
        int n = s.length();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        for(auto w:dic) mp[w]++;
        return solve(0,0,n,s,mp,dp);
    }

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

You are given a non-empty string S containing no spaces’ and a dictionary of non-empty strings (say the list of words). 
You are supposed to construct and return all possible sentences after adding spaces in the originally given string ‘S’, 
such that each word in a sentence exists in the given dictionary.


    void solve(int i, int j, string& s, string cur, map<string,int>& dict, vector<string>& ans){
        string _s = s.substr(i,j-i+1);
        if(j==s.length()-1){
            if(dict[_s]){
                string temp=cur+_s;
                ans.push_back(temp);
            }
            return;
        }
        if(dict[_s]){
            solve(j+1,j+1,s,cur+_s+" ",dict,ans);
            solve(i,j+1,s,cur,dict,ans);
        }else solve(i,j+1,s,cur,dict,ans);
    }
    vector<string> wordBreak(string &s, vector<string> &dictionary)
    {
        map<string,int> dict;
        for(auto s:dictionary) dict[s]=1;
        vector<string> ans;
        solve(0,0,s,"",dict,ans);
        return ans;
    }