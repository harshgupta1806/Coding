In operating systems that use paging for memory management, page replacement algorithm is needed to decide 
which page needs to be replaced when the new page comes in. Whenever a new page is referred and is not present in memory, 
the page fault occurs and Operating System replaces one of the existing pages with a newly needed page.
Given a sequence of pages in an array pages[] of length N and memory capacity C, find the number of page faults using
Least Recently Used (LRU) Algorithm. 
Note:- Before solving this example revising the OS LRU cache mechanism is recommended.



    int pageFaults(int N, int C, int pages[]){
        vector<int> lru;
        int pf=0;
        for(int i=0;i<N;i++){
            auto it = find(lru.begin(),lru.end(),pages[i]);
            if(it != lru.end()){
                lru.erase(it);
                lru.push_back(pages[i]);
            }else{
                pf++;
                if(lru.size() < C) lru.push_back(pages[i]);
                else{
                    lru.erase(lru.begin());
                    lru.push_back(pages[i]);
                }
            }
        }
        return pf;
    }