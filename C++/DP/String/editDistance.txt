Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character


    int solve(int i, int j, string s, string t, vector<vector<int>>& dp){
        if(i<0) return j+1; //insert remaining
        if(j<0) return i+1; //delete remaining
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==t[j]) return solve(i-1,j-1,s,t,dp);
        int replace = solve(i-1,j-1,s,t,dp);
        int insert = solve(i,j-1,s,t,dp);
        int remove = solve(i-1,j,s,t,dp);
        return dp[i][j] = 1 + min(replace, min(insert, remove)); //+1 for operation performed
    }
    int minDistance(string s, string t) {
        int n=s.length();
        int m=t.length();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return solve(n-1,m-1,s,t,dp);
    }

//Tabulation

    int minDistance(string s, string t) {
        int n=s.length();
        int m=t.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));

        for(int i=0;i<=n;i++) dp[i][0]=i;
        for(int j=0;j<=m;j++) dp[0][j]=j;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i][j-1], dp[i-1][j]));
            }
        }
        return dp[n][m];
    }

//Optimised Tabulation

    int minDistance(string s, string t) {
        int n=s.length();
        int m=t.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        vector<int> pre(m+1), cur(m+1);

        for(int j=0;j<=m;j++) pre[j]=j; // base case 1

        for(int i=1;i<=n;i++){
            cur[0]=i;                   // base case 2
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1]) cur[j] = pre[j-1];
                else cur[j] = 1 + min(pre[j-1], min(cur[j-1], pre[j]));
            }
            pre=cur;
        }
        return pre[m];
    }
