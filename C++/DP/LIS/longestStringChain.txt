A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, 
where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. 
A single word is trivially a word chain with k == 1.
Return the length of the longest possible word chain with words chosen from the given list of words.
wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA 
without changing the order of the other characters to make it equal to wordB.

    bool compare(string& s1, string& s2){
        if(s1.size() != s2.size() + 1) return false;
        
        int first = 0;
        int second = 0;
        
        while(first < s1.size()){
            if(second < s2.size() && s1[first] == s2[second]){
                first ++;
                second ++;
            }
            else first ++;
        }
        if(first == s1.size() && second == s2.size()) return true;
        else return false; 
    }
    int longestStrChain(vector<string>& words) {
        sort(words.begin(),words.end(),[](string s, string t){return s.length() < t.length();});
        int n=words.size();
        vector<int> dp(n,1);
        int lis_len=-1;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(compare(words[i],words[j]) && dp[i] < 1+dp[j]){
                    dp[i]=1+dp[j];
                }
            }
            if(dp[i]>lis_len){
                lis_len = dp[i];
            }
        }
        return lis_len;
    }