You are given an array of integers nums, there is a sliding window of size k which is moving from the very left 
of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves 
right by one position.
Return the max sliding
 window.


    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        deque<int> dq;
        vector<int> ans;
        for(int i=0;i<n;i++){
            if(!dq.empty() && i - dq.front() >= k) dq.pop_front(); // before pushing check if we are in window or not
            while(!dq.empty() && nums[dq.back()] <= nums[i]) dq.pop_back(); // maintain monotonicity
            dq.push_back(i);
            if(i+1>=k) ans.push_back(nums[dq.front()]); // get min from front
        }
        return ans;
    }   