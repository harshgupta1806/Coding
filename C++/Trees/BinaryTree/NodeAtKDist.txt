Node* targetNode; //global pointer to point at target data
//Store all parents as to go to parents also 
void findPar(TreeNode* root,map<TreeNode*,TreeNode*> &parent){
    if(root->left){
        parent[root->left]=root;
        findPar(root->left,parent);
    }
    if(root->right){
        parent[root->right]=root;
        findPar(root->right,parent);
    }
}
vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
    map<TreeNode*,TreeNode*> parent;
    findPar(root,parent);
    map<TreeNode*,int> vis;
    queue<pair<TreeNode*,int>> q;
    vector<int> ans;
    q.push({target,0});
    vis[target]=1;
    while(!q.empty()){
        TreeNode* node=q.front().first;
        int d=q.front().second;
        q.pop();
        if(d==k){
            ans.push_back(node->val);
            continue;
        }
        if(parent.find(node)!=parent.end() && !vis[parent[node]]){
            q.push({parent[node],d+1});
            vis[parent[node]]=1;
        }
        if(node->left && !vis[node->left]){
            q.push({node->left,d+1});
            vis[node->left]=1;
        }
        if(node->right && !vis[node->right]){
            q.push({node->right,d+1});
            vis[node->right]=1;
        }
    }
    return ans;
}