ou are given an expression 'exp' in the form of a string where 
operands will be : (TRUE or FALSE), and operators will be : (AND, OR or XOR).
Now you have to find the number of ways we can parenthesize the expression such that it will evaluate to TRUE.
As the answer can be very large, return the output modulo 1000000007.
Note :
‘T’ will represent the operand TRUE.
‘F’ will represent the operand FALSE.
‘|’ will represent the operator OR.
‘&’ will represent the operator AND.
‘^’ will represent the operator XOR.


    int solve(int i, int j, string s, int isTrue, vector<vector<vector<int>>>& dp){
        if(i>j) return 0;
        if(i==j){
            if(isTrue) return s[i]=='T';
            return s[i]=='F';
        }
        if(dp[i][j][isTrue] != -1) return dp[i][j][isTrue];
        int mod = 1003, ways = 0;
        for(int k=i+1;k<j;k+=2){
            int lt = solve(i,k-1,s,1,dp);
            int rt = solve(k+1,j,s,1,dp);
            int lf = solve(i,k-1,s,0,dp);
            int rf = solve(k+1,j,s,0,dp);
            if(s[k] == '&'){
                if(isTrue) ways = (ways + lt * rt) % mod;
                else ways = (ways + lf * rt + rf * lt + lf * rf) % mod;
            }else if(s[k] == '|'){
                if(isTrue) ways = (ways + lt * rt + lf * rt + rf * lt) % mod;
                else ways = (ways + lf * rf) % mod;
            }else if(s[k] == '^'){
                if(isTrue) ways = (ways + lf * rt + rf * lt) % mod;
                else ways = (ways + lf * rf + rt * lt) % mod;
            }
        }
        return dp[i][j][isTrue] = ways;
    }
    int countWays(int n, string s){
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(n,vector<int>(2,-1)));
        return solve(0,n-1,s,1,dp);
    }


-------------------------------------------------------------------Tabulation-----------------------------------------------------------

    int evaluateExp(string & exp) {
        long long mod=1000000007;
        int n=exp.length();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(n,vector<int>(2,0)));
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                if(i==j)
                {
                    dp[i][j][0]=(exp[i]=='F');
                    dp[i][j][1]=(exp[i]=='T');
                }
                else 
                {
                    long long ways=0;
                    for(long long ind=i+1;ind<=j-1;ind+=2)
                    {
                        long long lt=dp[i][ind-1][1]%mod;
                        long long rt=dp[ind+1][j][1]%mod;
                        long long lf=dp[i][ind-1][0]%mod;
                        long long rf=dp[ind+1][j][0]%mod;
                        if(exp[ind]=='&')
                        {
                            dp[i][j][0]=(dp[i][j][0]+(lt*rf+lf*rt+lf*rf))%mod;
                            dp[i][j][1]=(dp[i][j][1]+(lt*rt))%mod;
                        }
                        else if(exp[ind]=='|')
                        {
                            dp[i][j][0]=(dp[i][j][0]+(lf*rf))%mod;
                            dp[i][j][1]=(dp[i][j][1]+(lt*rf+lf*rt+lt*rt))%mod;
                        }
                        else
                        {
                            dp[i][j][0]=(dp[i][j][0]+(lt*rt+lf*rf))%mod;
                            dp[i][j][1]=(dp[i][j][1]+(lt*rf+lf*rt))%mod;
                        }
                    }
                }
            }
        }
        return dp[0][n-1][1];
    }