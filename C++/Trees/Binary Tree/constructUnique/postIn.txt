
    TreeNode* solve(int is, int ie, vector<int>& in, int ps, int pe, vector<int>& post, unordered_map<int,int>& mp){
        if(is>ie || ps>pe) return NULL;
        TreeNode* root=new TreeNode(post[pe]);
        int rootPos=mp[post[pe]], numsLeft = rootPos - is;
        root->left = solve(is, rootPos-1, in, ps, ps+numsLeft-1, post, mp);
        root->right = solve(rootPos+1, ie, in, ps+numsLeft, pe-1, post, mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
        int n=post.size();
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[in[i]]=i;
        }
        TreeNode* root=solve(0,n-1,in,0,n-1,post,mp);
        return root;
    }