Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct) present in the string str.
//dp[i][j] represents the number of palindromic subsequences in the substring from index i to index j.


    long long int  countPS(string s)
    {
        int n=s.length(), mod=1e9+7;
        vector<vector<long long>> dp(n,vector<long long>(n));
        for(int l=1;l<=n;l++){
            for(int i=0;i<=n-l;i++){
                int j=i+l-1;
                if(i==j) dp[i][j]=1;
                else if(i==j-1) dp[i][j]=s[i]==s[j]?3:2;
                else{
                    if(s[i]==s[j]) dp[i][j]=(dp[i][j-1]+dp[i+1][j]+1)%mod;
                    else dp[i][j]=(dp[i][j-1]+dp[i+1][j]-dp[i+1][j-1]+mod)%mod;
                } 
            }           
        }
        return dp[0][n-1];
    }